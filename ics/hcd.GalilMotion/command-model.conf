{
  subsystem = "APS"
  component = "ICS.HCD.GalilMotion"
  description = """
    Commands which can be accepted by the APS Instrument Control System GalilMotion HCD.
  """
  receive = [
    // Immediate Commands
    {
      name = configAxis
      description = "Configures motion parameters and inPosition threshold for a given axis."
      args = [
        {
          name = axis
          description = "The axis to configure (A-H)."
          enum = ["A", "B", "C", "D", "E", "F", "G", "H"]
        },
        {
          name = velocity
          description = "Default velocity for the axis."
          type = float
        },
        {
          name = acceleration
          description = "Acceleration value for the axis."
          type = float
        },
        {
          name = deceleration
          description = "Deceleration value for the axis."
          type = float
        },
        {
          name = indexOffset
          description = "Index offset for homing."
          type = float
        },
        {
          name = indexSpeed
          description = "Index speed during homing."
          type = float
        },
        {
          name = inPositionThreshold
          description = "Threshold value to determine inPosition status."
          type = float
        }
      ]
      requiredArgs = ["axis"]
    },
    {
      name = configRotatingAxis
      description = "Sets the axis as rotating and selects the approach algorithm."
      args = [
        {
          name = axis
          description = "The axis to configure as rotating (A-H)."
          enum = ["A", "B", "C", "D", "E", "F", "G", "H"]
        },
        {
          name = algorithm
          description = "Approach algorithm for the rotating mechanism."
          enum = ["forward", "reverse", "shortest"]
        }
      ]
      requiredArgs = ["axis", "algorithm"]
    },
    {
      name = configLinearAxis
      description = "Configures the axis as linear with defined soft-limit boundaries."
      args = [
        {
          name = axis
          description = "The axis to configure as linear (A-H)."
          enum = ["A", "B", "C", "D", "E", "F", "G", "H"]
        },
        {
          name = upperLimit
          description = "The upper soft limit for the axis."
          type = float
        },
        {
          name = lowerLimit
          description = "The lower soft limit for the axis."
          type = float
        }
      ]
      requiredArgs = ["axis", "upperLimit", "lowerLimit"]
    },
    {
      name = setBit
      description = "Sets or clears a digital output bit at the specified address."
      args = [
        {
          name = address
          description = "The address of the digital output bit."
          type = integer
        },
        {
          name = value
          description = "The value to set (0 or 1)."
          type = integer
        }
      ]
      requiredArgs = ["address", "value"]
    },
    {
      name = setAO
      description = "Sets an analog output channel to the given value."
      args = [
        {
          name = address
          description = "The address of the analog output channel."
          type = integer
        },
        {
          name = value
          description = "The value to set on the analog output channel."
          type = float
        }
      ]
      requiredArgs = ["address", "value"]
    },

    // Long Running Commands
    {
      name = homeAxis
      description = "Initiates the homing sequence for the specified axis."
      args = [
        {
          name = axis
          description = "The axis to home (A-H)."
          enum = ["A", "B", "C", "D", "E", "F", "G", "H"]
        }
      ]
      requiredArgs = ["axis"]
      completionType = "longRunning"
    },
    {
      name = positionAxis
      description = "Moves the specified axis to an absolute target position."
      args = [
        {
          name = axis
          description = "The axis to move (A-H)."
          enum = ["A", "B", "C", "D", "E", "F", "G", "H"]
        },
        {
          name = target
          description = "The target position (in encoder counts)."
          type = float
        }
      ]
      requiredArgs = ["axis", "target"]
      completionType = "longRunning"
    },
    {
      name = offsetAxis
      description = "Moves the specified axis by a relative distance."
      args = [
        {
          name = axis
          description = "The axis to offset (A-H)."
          enum = ["A", "B", "C", "D", "E", "F", "G", "H"]
        },
        {
          name = distance
          description = "The relative distance to move the axis."
          type = float
        }
      ]
      requiredArgs = ["axis", "distance"]
      completionType = "longRunning"
    },
    {
      name = selectWheel
      description = "Positions a rotating mechanism (e.g., filter wheel) based on a discrete selection."
      args = [
        {
          name = axis
          description = "The axis associated with the rotating mechanism."
          enum = ["A", "B", "C", "D", "E", "F", "G", "H"]
        },
        {
          name = position
          description = "The filter number corresponding to the desired wheel position."
          type = integer
        }
      ]
      requiredArgs = ["axis", "position"]
      completionType = "longRunning"
    },
    {
      name = trackAxis
      description = "Sets the specified axis into tracking mode with continuous target updates."
      args = [
        {
          name = axis
          description = "The axis to track (A-H)."
          enum = ["A", "B", "C", "D", "E", "F", "G", "H"]
        },
        {
          name = target1
          description = "Primary tracking target value (e.g., absolute position)."
          type = float
        },
        {
          name = target2
          description = "Secondary tracking parameter (e.g., desired velocity)."
          type = float
        }
      ]
      requiredArgs = ["axis", "target1"]
      completionType = "longRunning"
    },
    {
      name = stopAxis
      description = "Stops any active motion on the specified axis."
      args = [
        {
          name = axis
          description = "The axis to stop (A-H)."
          enum = ["A", "B", "C", "D", "E", "F", "G", "H"]
        }
      ]
      requiredArgs = ["axis"]
      completionType = "longRunning"
    },
    {
      name = faultReset
      description = "Initiates fault recovery using the specified severity level."
      args = [
        {
          name = severity
          description = "Fault recovery level to perform."
          enum = ["None", "Init", "Minor", "Major"]
        }
      ]
      requiredArgs = ["severity"]
      completionType = "longRunning"
    }
  ]
}