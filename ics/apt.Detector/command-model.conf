subsystem=APS
component=ICS.APT.Detector
description="""
Commands which can be accepted by APS Instrument Control System Acquisition, Pointing and Tracking Detector Assembly.
"""
receive=[

	{
		name=configDetectorCooling
		description="""Sets the camera’s cooling set point and fan speed.  This is used to manually cool or warm up the CCD or set a specific temperature for diagnostic/characterization purposes."""
		completionType=longRunning
		requiredArgs=["temperatureSetPoint","fanSpeed"]
		args=[
			{
				name=temperatureSetPoint
				description="""Target temperature"""
				type=float
				units=degC
			}
			{
				name=fanSpeed
				description="""Internal Fan speed"""
				enum=[OFF, LOW, MEDIUM, HIGH]
			}
        ]
    }
	{
		name=configDetector
		description="""Optionally configures the camera’s ROI, binning, shutterMode, cycleMode and gainMode. If a parameter does not appear with the command, the default value in the assembly configuration is used."""
		completionType=longRunning
		requiredArgs=[]
		args=[
			{
				name=roistartRow
				description="""start row of ROI."""
				type=integer
				units=pix
			}
			{
				name=roistartCol
				description="""start col of ROI."""
				type=integer
				units=pix
			}
			{
				name=roiwidth
				description="""width of ROI"""
				type=integer
				units=pix
			}
			{
				name=roiheight
				description="""height of ROI"""
				type=integer
				units=pix
			}
            { 
                name = "hBin"
                 description = "Horizontal Binning in pixels"
                type = integer
                units = pix

            }
            { 
                name = "vBin"
                 description = "Vertical Binning in pixels"
                type = integer
                units = pix

            }
            {
				name=gainMode
				description="""Fastest mode (12-bit) or high dynamic range (16-bit)"""
				enum=["12-BIT", "16-BIT"]
			}
            
        ]
    }

	{
		name=setDefaultConfiguration
		description="""Configures the camera to its default configuration and cooling as set in the assembly configuration"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}
	{
		name=takeAndPublishExposure
		description="""Takes exposure with detector and performs image pre-processing and publishes the image"""
		completionType=longRunning
		requiredArgs=["integrationTime"]
		args=[
			{
				name=integrationTime
				description="""Integration time."""
				type=float
				units=second
			}
            {
				name=gainMode
				description="""Fastest mode (12-bit) or high dynamic range (16-bit)"""
				enum=["12-BIT", "16-BIT"]
			}

		]
	}
    
	{
		name=takeAndStoreExposure
		description="""Takes exposure with detector and stores the image in the APS shared disk and DMS"""
		completionType=longRunning
		requiredArgs=["integrationTime"]
		args=[
			{
				name=integrationTime
				description="""Integration time."""
				type=float
				units=second
			}
            {
				name=gainMode
				description="""Fastest mode (12-bit) or high dynamic range (16-bit)"""
				enum=["12-BIT", "16-BIT"]
			}
		]
	}
	
	{
		name=startExposureLoop
		description="""Takes continuous exposures with detector, performs image preprocessing for each image and publishes each image.  The exposures are triggered by software in the assembly.  In cases where the APT filter needs to be moved between exposures, or the integration time changed, the commands pauseExposureLoop and restartExposureLoop are used"""
		requiredArgs=["integrationTime", "rate"]
		completionType=longRunning
		args=[

			{
				name=integrationTime
				description="""Integration time."""
				type=float
				units=second
			}

			{
				name=rate
				description="""Rate at which images are to be published."""
				type=float
				units=hertz
			}
            {
				name=gainMode
				description="""Fastest mode (12-bit) or high dynamic range (16-bit)"""
				enum=["12-BIT", "16-BIT"]
			}

		]
	}
	{
		name=stopExposureLoop
		description="""Stops the taking of continuous exposures with detector"""
		requiredArgs=[]
		completionType=longRunning
		args=[]
	}
	{
		name=pauseExposureLoop
		description="""Pauses the loop that triggers exposures using the software trigger until a restartExposureLoop command is received.  The pauseExposureLoop waits for an exposure taking sequence to complete before pausing the loop"""
		requiredArgs=[]
		completionType=longRunning
		args=[]
	}
	{
		name=restartExposureLoop
		description="""Restarts the loop that triggers exposures using the software trigger."""
		requiredArgs=[]
		completionType=longRunning
		args=[]
	}
	{
		name=takeHighSpeedExposures
		description="""Takes a discrete number of continuous exposures and reads them into memory.  When the high speed data taking has completed, the APT Detector Assembly reads image data from memory, assembles the data into FITS files according to the chunk size rules in the assemblies configuration and stores the files to the APS Shared Disk and to DMS"""
		requiredArgs=["integrationTime","roiIdentifier", "frameRate", "duration"]
		completionType=longRunning
		args=[
			{
				name=integrationTime
				description="""Integration time."""
				type=float
				units=second
			}
            {
				name=gainMode
				description="""Fastest mode (12-bit) or high dynamic range (16-bit)"""
				enum=["12-BIT", "16-BIT"]
			}
			{
				name=roiIdentifier
				description="""Identifier of predefined ROI in the assembly configuration"""
				type=integer
				units=NoUnits
			}
			{
				name=frameRate
				description="""frame rate (frames/sec). Must be less than the max frame rate associated with the High Speed predefined ROI."""
				type=integer
				units=NoUnits
			}
			{
				name=duration
				description="""Duration of high speed continuous exposure taking"""
				type=integer
				units=second
			}
			
		]
	}
    {
		name=abortHighSpeedExposure
		description="""Aborts an integrating high speed exposure.  Used when aborting a high speed procedure to save time."""
		requiredArgs=[]
		completionType=longRunning
		args=[]
	}
    {
		name=recover
		description="""Attempt recovery from fault state using specified strategy"""
		requiredArgs=["mode"]
		completionType=longRunning
		args=[
            {
                name = "mode"
                enum = ["CLEAR", "RESET", "REBOOT"]
                description = "Selected recovery action (flush buffers, reset detector, or power cycle)"
            }
            {
                name = "autoResume"
                type = boolean
                description = "If true, resume exposure loop after recovery; defaults to false if omitted"
            }

        ]
	}
    {
		name=resetCamera
		description="""Re-initialise the camera and its Micro-Manager device adapter."""
		requiredArgs=[]
		completionType=longRunning
		args=[]
	}
        

]

send = [
  {
    name = "configureCooling"
    subsystem = "APS"
    component = "ICS.HCD.Detector"
  }
  {
    name = "configureROI"
    subsystem = "APS"
    component = "ICS.HCD.Detector"
  }
  {
    name = "configureDetector"
    subsystem = "APS"
    component = "ICS.HCD.Detector"
  }
  {
    name = "startExposure"
    subsystem = "APS"
    component = "ICS.HCD.Detector"
  }
  {
    name = "startExposureLoop"
    subsystem = "APS"
    component = "ICS.HCD.Detector"
  }
  {
    name = "stopExposureLoop"
    subsystem = "APS"
    component = "ICS.HCD.Detector"
  }
  {
    name = "pauseExposureLoop"
    subsystem = "APS"
    component = "ICS.HCD.Detector"
  }
  {
    name = "resumeExposureLoop"
    subsystem = "APS"
    component = "ICS.HCD.Detector"
  }
  {
    name = "setDataBuffer"
    subsystem = "APS"
    component = "ICS.HCD.Detector"
  }  
  {
    name = "setLoopRingBuffer"
    subsystem = "APS"
    component = "ICS.HCD.Detector"
  }
  {
    name = "setContiguousDataBuffers"
    subsystem = "APS"
    component = "ICS.HCD.Detector"
  }
  {
    name = "startBurst"
    subsystem = "APS"
    component = "ICS.HCD.Detector"
  }
  {
    name = "stopExposure"
    subsystem = "APS"
    component = "ICS.HCD.Detector"
  }
  {
    name = "recover"
    subsystem = "APS"
    component = "ICS.HCD.Detector"
  }
  {
    name = "resetCamera"
    subsystem = "APS"
    component = "ICS.HCD.Detector"
  }
]