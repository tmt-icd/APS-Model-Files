subsystem=APS
component=ICS.SAM
publish {
	description = """
Status and ICS components states (positions, temperatures, etc) telemetry
"""

	events=[
		{
			name=icsStatusEvent
			description="""APS-ICS state event for all ICS components (positions, temperatures, etc)"""
			maxRate = 1
			archive=true
            category=STATUS
			attributes=[            
                {
					name=acquistionAndGuidingCapabilityStatus
					description="""Status of APS capability to support acquisition and guiding."""
					enum = ["READY", "DEGRADED", "NOT_READY"]
				}
                {
					name=onSkyAlignmentCapabilityStatus
					description="""Status of APS capability to support on-sky alignment procedures."""
					enum = ["READY", "DEGRADED", "NOT_READY"]
				}
                {
					name=calibrationCapabilityStatus
					description="""Status of APS capability to support internal calibration procedures."""
					enum = ["READY", "DEGRADED", "NOT_READY"]
				}
                {
					name=stimulusCalibrationCapabilityStatus
					description="""Status of APS capabililty to support calibration procedures using the stimulus."""
					enum = ["READY", "DEGRADED", "NOT_READY"]
				}
                {
					name=tofsTestingCapabililtyStatus
					description="""Status of APS capabililty to support TOFS testing."""
					enum = ["READY", "DEGRADED", "NOT_READY"]
				}
                {
					name=apsInstrumentOperatingMode
					description="""The current operating mode of the APS instrument."""
					enum = ["ON_SKY_MODE", "CALIBRATION_SOURCE_MODE", "STIMULUS_SOURCE_MODE", "STAND_BY_MODE"]
				}
                {
					name=pitLoopState
					description="""State of the PIT Loop"""
					enum=["STOPPED", "NOTCONVERGED", "TILTPLATEOFFLOADING", "CONVERGED"]
				}
    			{
					name=foc.steeringBeamSplitter.xStage.position
					description="""The current steeringBeamSplitter x axis position"""
					type=double
                    units=millimeter 
				}
				{
					name=foc.steeringBeamSplitter.xStage.indexed
					description="""True if the steeringBeamSplitter x axis has been homed"""
					type=boolean
				}
				{
					name=foc.steeringBeamSplitter.xStage.inPosition
					description="""True if the steeringBeamSplitter x axis has reached its target with sufficient accuracy."""
					type=boolean
				}
 			    {
					name=foc.steeringBeamSplitter.yStage.position
					description="""The current steeringBeamSplitter y axis position"""
					type=double
                    units=millimeter 
				}
				{
					name=foc.steeringBeamSplitter.yStage.indexed
					description="""True if the steeringBeamSplitter y axis has been homed"""
					type=boolean
				}
				{
					name=foc.steeringBeamSplitter.yStage.inPosition
					description="""True if the steeringBeamSplitter y axis has reached its target with sufficient accuracy."""
					type=boolean
				}
				{
					name=foc.calibrationSourceStage.position
					description="""The current calibrationSourceStage position"""
					type=double
                    units=millimeter 
				}
				{
					name=foc.calibrationSourceStage.indexed
					description="""True if the calibrationSourceStage has been homed"""
					type=boolean
				}
				{
					name=foc.calibrationSourceStage.inPosition
					description="""True if the calibrationSourceStage has reached its target with sufficient accuracy."""
					type=boolean
				}
				{
					name=foc.calibrationSourceStage.lightOn
					description="""status of calibrationSourceStage light on/off state"""
					enum=["ON", "OFF"]
				}
				{
					name=foc.calibrationSourceStage.lightIntensity
					description="""calibrationSourceStage light intensity read from galil (% of max)"""
					type=double
				}
				{
					name=foc.kMirror.mode
					description="""The current K-Mirror mode"""
					enum=[SLEWING, TRACKING, MANUAL] 
				}
				{
					name=foc.kMirror.position
					description="""The current K-Mirror position"""
					type=double
                    units=degree
				}
				{
					name=foc.kMirror.inPosition
					description="""True if the K-Mirror is sufficiently close to the commanded position or the current tracking position demand when tracking"""
					type=boolean
				}				{
					name=foc.kMirror.velocity
					description="""The current K-Mirror velocity in degree/second"""
					type=double
                    units=NoUnits
				}
				{
					name=foc.kMirror.indexed
					description="""True if the K-Mirror has been homed"""
					type=boolean
				}
    			{
					name=foc.tiltPlate.xStage.position
					description="""The current tiltPlate X stage position"""
					type=double
                    units=millimeter 
				}
				{
					name=foc.tiltPlate.xStage.indexed
					description="""True if the tiltPlate X stage has been homed"""
					type=boolean
				}
				{
					name=foc.tiltPlate.xStage.inPosition
					description="""True if the tiltPlate X stage has reached its target with sufficient accuracy."""
					type=boolean
				}
    			{
					name=foc.tiltPlate.yStage.position
					description="""The current tiltPlate Y stage position"""
					type=double
                    units=millimeter 
				}
				{
					name=foc.tiltPlate.yStage.indexed
					description="""True if the tiltPlate Y stage has been homed"""
					type=boolean
				}
				{
					name=foc.tiltPlate.yStage.inPosition
					description="""True if the tiltPlate Y stage has reached its target with sufficient accuracy."""
					type=boolean
				}
 				{
					name=foc.columatorUnit.frontMotor.position
					description="""The current axis position"""
					type=double
                    units=millimeter 
				}
				{
					name=foc.columatorUnit.frontMotor.position.indexed
					description="""True if the columatorUnit frontMotor has been homed"""
					type=boolean
				}
				{
					name=foc.columatorUnit.frontMotor.position.inPosition
					description="""True if the columatorUnit frontMotor has reached its target with sufficient accuracy."""
					type=boolean
				}
				{
					name=foc.columatorUnit.backMotor.position
					description="""The current columatorUnit backMotor position"""
					type=double
                    units=millimeter 
				}
				{
					name=foc.columatorUnit.backMotor.position.indexed
					description="""True if the columatorUnit backMotor has been homed"""
					type=boolean
				}
				{
					name=foc.columatorUnit.backMotor.position.inPosition
					description="""True if the axis has olumatorUnit backMotor its target with sufficient accuracy."""
					type=boolean
				}
      		    {
					name=psh.focusStage.position
					description="""The current PSH focus stage position"""
					type=double
                    units=millimeter 
				}
				{
					name=psh.focusStage.indexed
					description="""True if the PSH focus stage has been homed"""
					type=boolean
				}
				{
					name=psh.focusStage.inPosition
					description="""True if the PSH focus stage has reached its target with sufficient accuracy."""
					type=boolean
				}
      		    {
					name=pit.focusStage.position
					description="""The current PIT focus stage position"""
					type=double
                    units=millimeter 
				}
				{
					name=pit.focusStage.indexed
					description="""True if the PIT focus stage has been homed"""
					type=boolean
				}
				{
					name=pit.focusStage.inPosition
					description="""True if the PIT focus stage has reached its target with sufficient accuracy."""
					type=boolean
				}
				{
					name=stim.fiberSourceXAxis.position
					description="""The current stimulus fiberSource X Axis position"""
					type=double
                    units=millimeter 
				}
				{
					name=stim.fiberSourceXAxis.indexed
					description="""True if the stimulus fiberSource X Axis has been homed"""
					type=boolean
				}
				{
					name=stim.fiberSourceXAxis.inPosition
					description="""True if the stimulus fiberSource X Axis has reached its target with sufficient accuracy."""
					type=boolean
				}
				{
					name=stim.fiberSourceYAxis.position
					description="""The current stimulus fiberSource Y Axis position"""
					type=double
                    units=millimeter 
				}
				{
					name=stim.fiberSourceYAxis.indexed
					description="""True if the stimulus fiberSource Y Axis has been homed"""
					type=boolean
				}
				{
					name=stim.fiberSourceYSAxis.inPosition
					description="""True if the stimulus fiberSource Y Axis has reached its target with sufficient accuracy."""
					type=boolean
				}
				{
					name=stim.fiberSourceZAxis.position
					description="""The current fiberSource Z Stage position"""
					type=double
                    units=millimeter 
				}
				{
					name=stim.fiberSourceZAxis.indexed
					description="""True if the fiberSource Z Stage has been homed"""
					type=boolean
				}
				{
					name=stim.fiberSourceZAxis.inPosition
					description="""True if the stimulus fiberSource Z Axis has reached its target with sufficient accuracy."""
					type=boolean
				}
				{
					name=stim.fiberSourceStage.lightOn
					description="""status of stimulus fiberSourceStage light on/off state"""
					enum=["ON", "OFF"]
				}
				{
					name=stim.fiberSourceStage.lightIntensity
					description="""stimulus fiberSourceStage light intensity read from galil (% of max)"""
					type=double
				}
      		    {
					name=stim.pupilMaskXStage.position
					description="""The current stimulus pupilMask X Stage position"""
					type=double
                    units=millimeter 
				}
				{
					name=stim.pupilMaskXStage.indexed
					description="""True if the stimulus pupilMask X Stage has been homed"""
					type=boolean
				}
				{
					name=stim.pupilMaskXStage.inPosition
					description="""True if the stimulus pupilMask X Stage has reached its target with sufficient accuracy."""
					type=boolean
				}
     		    {
					name=stim.pupilMaskYStage.position
					description="""The current pupilMask Y Stage position"""
					type=double
                    units=millimeter 
				}
				{
					name=stim.pupilMaskYStage.indexed
					description="""True if the pupilMask Y Stage has been homed"""
					type=boolean
				}
				{
					name=stim.pupilMaskYStage.inPosition
					description="""True if the stimulus pupilMask Y Stage has reached its target with sufficient accuracy."""
					type=boolean
				}
    		    {
					name=stim.pupilMaskPhiStage.position
					description="""The current stimulus pupilMask Phi Stage position"""
					type=double
                    units=degree 
				}
				{
					name=stim.pupilMaskPhiStage.indexed
					description="""True if the stimulus pupilMask Phi Stage has been homed"""
					type=boolean
				}
				{
					name=stim.pupilMaskPhiStage.inPosition
					description="""True if the stimulus pupilMask Phi Stage has reached its target with sufficient accuracy."""
					type=boolean
				}
   		        {
					name=stim.insertionStage.position
					description="""The current stimulus insertion stage position"""
					type=double
                    units=millimeter 
				}
				{
					name=stim.insertionStage.indexed
					description="""True if the stimulus insertion stage has been homed"""
					type=boolean
				}
				{
					name=stim.insertionStage.inPosition
					description="""True if the stimulus insertion stage has reached its target with sufficient accuracy."""
					type=boolean
				}
                {
					name=abe.shutter.bladeASstate
					description="""Shutter Blade A state"""
					enum = ["OPEN", "CLOSED"]
				}
				{
					name=abe.shutter.bladeBState
					description="""Shutter Blade B state"""
					enum = ["OPEN", "CLOSED"]
				}
				{
					name=abe.shutter.errorIndicator
					description="""Shutter Error indicator bit state"""
					enum = ["YES", "NO"]
				}
                {
					name=apt.filterWheel.positionNum
					description="""The APT filter wheel position Number"""
					type=integer 
                    units=NoUnits
				}
				{
					name=apt.filterWheel.position
					description="""The APT filter wheel position in degrees"""
					type=double
                    units=degree
				}
				{
					name=apt.filterWheel.wheelState
					description="""The APT filter wheel state"""
					enum=[IDLE, MOVING, ERROR]
				}
				{
					name=apt.filterWheel.indexed
					description="""True if the APT filter wheel has been homed"""
					type=boolean
				}
				{
					name=apt.filterWheel.inPosition
					description="""True if the APT filter wheel has reached its target with sufficient accuracy."""
					type=boolean
				}
                {
					name=pit.filterWheel.positionNum
					description="""The PIT filter wheel position Number"""
					type=integer 
                    units=NoUnits
				}
                {
					name=psh.filterWheel.positionNum
					description="""The PSH filter wheel position Number"""
					type=integer 
                    units=NoUnits
				}
				{
					name=psh.filterWheel.position
					description="""The PSH filter wheel position in degrees"""
					type=double
                    units=degree
				}
				{
					name=psh.filterWheel.wheelState
					description="""The PSH filter wheel state"""
					enum=[IDLE, MOVING, ERROR]
				}
				{
					name=psh.filterWheel.indexed
					description="""True if the PSH filter has been homed"""
					type=boolean
				}
				{
					name=psh.filterWheel.inPosition
					description="""True if the PSH filter has reached its target with sufficient accuracy."""
					type=boolean
				}
                {
					name=pit.pupilMaskWheel.positionNum
					description="""The PIT pupil mask wheel position Number"""
					type=integer 
                    units=NoUnits
				}
				{
					name=pit.pupilMaskWheel.position
					description="""The PIT pupil mask wheel position in degrees"""
					type=double
                    units=degree
				}
				{
					name=pit.pupilMaskWheel.wheelState
					description="""The PIT pupil mask wheel state"""
					enum=[IDLE, MOVING, ERROR]
				}
                {
					name=pit.pupilMaskWheel.detentState
					description="""The PIT pupil mask wheel detent state"""
					enum=["RETRACTED", "EXTENDED", "OUT OF POSITION"]
				}
				{
					name=pit.pupilMaskWheel.indexed
					description="""True if the PIT pupil mask has been homed"""
					type=boolean
				}
				{
					name=pit.pupilMaskWheel.inPosition
					description="""True if the PIT pupil mask has reached its target with sufficient accuracy."""
					type=boolean
				}
                {
					name=psh.pupilMaskWheel.positionNum
					description="""The PIT pupil mask wheel position Number"""
					type=integer 
                    units=NoUnits
				}
				{
					name=psh.pupilMaskWheel.position
					description="""The PIT pupil mask wheel position in degrees"""
					type=double
                    units=degree
				}
				{
					name=psh.pupilMaskWheel.wheelState
					description="""The PIT pupil mask wheel state"""
					enum=[IDLE, MOVING, ERROR]
				}
                {
					name=psh.pupilMaskWheel.detentState
					description="""The PIT pupil mask wheel detent state"""
					enum=["RETRACTED", "EXTENDED", "OUT OF POSITION"]
				}
				{
					name=psh.pupilMaskWheel.indexed
					description="""True if the PIT pupil mask has been homed"""
					type=boolean
				}
				{
					name=psh.pupilMaskWheel.inPosition
					description="""True if the PIT pupil mask has reached its target with sufficient accuracy."""
					type=boolean
				}
                {
					name=abe.enclosure.purgeAirFlowRate
					description="""Purge Air Flow Rate (liters/sec)"""
					type=double
                    units=NoUnits
				}
				{
					name=abe.enclosure.coolantPressure
					description="""Overall Coolant Pressure (bars)"""
					type=double
                    units=bar
				}
				{
					name=abe.enclosure.pshCoolantFlowRate
					description="""PSH Detector Coolant Flow Rate (liters/sec)"""
					type=double
                    units=NoUnits
				}
				{
					name=abe.enclosure.pitCoolantFlowRate
					description="""PIT Detector Coolant Flow Rate (liters/sec)"""
					type=double
                    units=NoUnits
				}
				{
					name=abe.enclosure.aptCoolantFlowRate
					description="""APT Detector Coolant Flow Rate (liters/sec)"""
					type=double
                    units=NoUnits
				}
				{
					name=abe.enclosure.lowfsCoolantFlowRate
					description="""LOWFS Detector Coolant Flow Rate (liters/sec)"""
					type=double
                    units=NoUnits
				}
				{
					name=abe.enclosure.abe.enclosure.shutterTemperature
					description="""APS Bench enclosure shutter temperature (deg C)"""
					type=double
                    units=degC
				}
				{
					name=abe.enclosure.shutterHumidity
					description="""APS Bench enclosure shutter relative humidity (%)"""
					type=double
                    units=percent
				}
				{
					name=abe.enclosure.shutterDewPoint
					description="""APS Bench enclosure shutter dew point (deg C)"""
					type=double
                    units=degC
				}
				{
					name=abe.enclosure.pshTemperature
					description="""PSH detector temperature (deg C)"""
					type=double
                    units=degC
				}
				{
					name=abe.enclosure.pshHumidity
					description="""PSH detector relative humidity (%)"""
					type=double
                    units=percent
				}
				{
					name=abe.enclosure.pshDewPoint
					description="""PSH detector dew point (deg C)"""
					type=double
                    units=degC
				}
				{
					name=abe.enclosure.electronicsCabinetTemperature
					description="""Electronics Cabinet temperature (deg C)"""
					type=double
                    units=degC
				}
				{
					name=abe.enclosure.electronicsCabinetHumidity
					description="""Electronics Cabinet relative humidity (%)"""
					type=double
                    units=percent
				}
				{
					name=abe.enclosure.electronicsCabinetDewPoint
					description="""Electronics Cabinet dew point (deg C)"""
					type=double
                    units=degC
				}
				{
					name=abe.enclosure.placeholderCurrentTemperature
					description="""Placeholder for temperature readings from temperature sensors placed at various positions on the APS bench.  Number of sensors and positions TBD"""
					type=double
                    units=degC
				}
                {
					name=apt.Detector.cameraState
					description="""Camera State"""
					enum = [NotInitialized, CheckingTemperature, InitializingSensor, InitializingFeatures, OK, Fault-OverTemperature, Fault-ContactSupport]
				}
				{
					name=apt.Detector.coolingState
					description="""The current status of the detector cooling system"""
					enum = [Off, Stabilized, Cooling, Drift, NotStabilized, Fault, OverTemperature]
				}
				{
					name=apt.Detector.detectorTemperature
					description="""The current temperature of the detector"""
					type=double
                    units=degC
				}
				{
					name=apt.Detector.cameraPresent
					description="""When true, the camera is connected.  Can detect disconnection events"""
					type=boolean
				}
				{
					name=apt.Detector.cameraAcquiring
					description="""When true, the camera is acquiring."""
					type=boolean
				}
				{
					name=apt.Detector.readoutTime
					description="""Time to readout one frame."""
					type=double
                    units=second
				}
				{
					name=apt.Detector.imageSize
					description="""The buffer size in bytes required to store the data for one frame."""
					type=integer
                    units=NoUnits
				}
				{
					name=apt.Detector.shutterMode
					description="""The current shutter mode."""
					enum=[CLOSED, OPEN, AUTO]
				}
				{
					name=apt.Detector.triggerMode
					description="""The camera trigger mode."""
					enum=[Internal, Software, External, External Start, External Exposure]
				}
				{
					name=apt.Detector.cycleMode
					description="""Current cycle mode: When continuous, the camera will readout frames until receiving a stopExposure command.."""
					enum=[Fixed, Continuous]
				}
 				{
					name=apt.Detector.gainMode
					description="""Current gain mode."""
					enum=["12=bit", "16-bit"]
				}
 				
 				{
					name=apt.Detector.pixelEncoding
					description="""The format of the data stream."""
					enum=[Mono12, Mono12Packed, Mono16, Mono32, Mono12CXP, Mono18]
				}
 				{
					name=apt.Detector.pixelReadoutRate
					description="""Pixel readout rate."""
					enum=[100MHz, 200MHz]
				}
 				{
					name=apt.Detector.exposureTime
					description="""Exposure time."""
					type=double
                    units=second
				}
 				{
					name=apt.Detector.frameCount
					description="""The number of frames to take when acquiring."""
					type=integer
                    units=NoUnits
				}
 				{
					name=apt.Detector.frameRate
					description="""Configures the frame rate for internal trigger mode."""
					type=integer
                    units=hertz
				}
                {
					name=pit.Detector.temperatureStatus
					description="""Status of the cooling system.  Locked = stabilized to set point"""
					enum = [Faulted, Locked, Unlocked]
				}
				{
					name=pit.Detector.temperature
					description="""The current temperature of the detector"""
					type=double
                    units=degC
				}
				{
					name=pit.Detector.temperatureSetPoint
					description="""The target temperature for the cooling system."""
					type=double
                    units=degC
				}
				{
					name=pit.Detector.acquiring
					description="""When true, the camera acquisition status is running."""
					type=boolean
				}
				{
					name=pit.Detector.readoutRate
					description="""The current readout rate (frames/second)."""
					type=double
                    units=NoUnits
				}
				{
					name=pit.Detector.bitDepth
					description="""Resolution of pixel digitization in bits/pixel."""
					enum=[14-bit, 16-bit]
				}
				{
					name=pit.Detector.analogGain
					description="""The current gain processing mode.  HDR combines High and Low gain exposures to increase dynamic range at the cost of readout speed."""
					enum=[LOW, HIGH, HDR]
				}
 				{
					name=pit.Detector.exposureTime
					description="""The currently configured exposure time."""
					type=double
                    units=millisecond
				}
 				{
					name=pit.Detector.cameraErrorState
					description="""The error state of the camera."""
					enum=[None, CameraFaulted, ConnectionLost, DataLost, DataNotArriving, ShutterOverheated]
				}

                {
					name=psh.Detector.temperatureStatus
					description="""Status of the cooling system.  Locked = stabilized to set point"""
					enum = [Faulted, Locked, Unlocked]
				}
				{
					name=psh.Detector.temperature
					description="""The current temperature of the detector"""
					type=double
                    units=degC
				}
				{
					name=psh.Detector.temperatureSetPoint
					description="""The target temperature for the cooling system."""
					type=double
                    units=degC
				}
				{
					name=psh.Detector.acquiring
					description="""When true, the camera acquisition status is running."""
					type=boolean
				}
				{
					name=psh.Detector.analogGain
					description="""The current gain processing mode.  HDR combines High and Low gain exposures to increase dynamic range at the cost of readout speed."""
					enum=[LOW, HIGH, HDR]
				}
 				{
					name=psh.Detector.exposureTime
					description="""The currently configured exposure time."""
					type=double
                    units=millisecond
				}
 				{
					name=psh.Detector.cameraErrorState
					description="""The error state of the camera."""
					enum=[None, CameraFaulted, ConnectionLost, DataLost, DataNotArriving, ShutterOverheated]
				}
			]
		}
	]
}
