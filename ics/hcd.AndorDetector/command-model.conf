subsystem = APS
component = ICS.HCD.AndorDetector

receive = [
  {
    name = "configureCooling"
    description = "Configure detector cooling and fan mode"
    requiredArgs = ["temperature", "fanSpeed"]
    parameters = [
      {
        name = "temperature"
        type = float
        units = degC
        description = "Target sensor temperature"
      },
      {
        name = "fanSpeed"
        enum = ["Off", "Low", "Medium", "High"]
        description = "Cooling fan setting"
      }
    ]
  },
  {
    name = "configureAOI"
    description = "Configure Area of Interest including binning and window"
    requiredArgs = ["Left", "Top", "Width", "Height", "HBin", "VBin"]
    parameters = [
      {
        name = "Left"
        type = integer
        units = pix
        description = "X origin of AOI (left column, 0-based)"
      },
      {
        name = "Top"
        type = integer
        units = pix
        description = "Y origin of AOI (top row, 0-based)"
      },
      {
        name = "Width"
        type = integer
        units = pix
        description = "Width of AOI in pixels"
      },
      {
        name = "Height"
        type = integer
        units = pix
        description = "Height of AOI in pixels"
      },
      {
        name = "HBin"
        type = integer
        description = "Horizontal binning factor"
      },
      {
        name = "VBin"
        type = integer
        description = "Vertical binning factor"
      }
    ]
  },
  {
    name = "configureShutter"
    description = "Configure shutter and trigger modes"
    requiredArgs = ["shutterMode", "triggerMode"]
    parameters = [
      {
        name = "shutterMode"
        enum = ["Closed", "Open", "Auto"]
        description = "Shutter state"
      },
      {
        name = "triggerMode"
        enum = ["Internal", "Software", "External", "ExternalStart", "ExternalExposure"]
        description = "Trigger configuration"
      }
    ]
  },
  {
    name = "configureDetector"
    description = "Configure core detector parameters"
    requiredArgs = ["cycleMode", "gainMode", "accumulateCount", "pixelEncoding", "pixelReadoutRate"]
    parameters = [
      {
        name = "cycleMode"
        enum = ["Fixed", "Continuous"]
        description = "Frame acquisition cycle mode"
      },
      {
        name = "gainMode"
        enum = ["12-bit", "16-bit"]
        description = "Readout gain setting"
      },
      {
        name = "accumulateCount"
        type = integer
        description = "Number of frames to accumulate"
      },
      {
        name = "pixelEncoding"
        enum = ["Mono12", "Mono16"]
        description = "Pixel format"
      },
      {
        name = "pixelReadoutRate"
        type = float
        description = "Pixel readout rate in MHz"
      }
    ]
  },
  {
    name = "setDataBuffer"
    description = "Allocate single data buffer for readout"
    requiredArgs = ["bufferSize"]
    parameters = [
      {
        name = "bufferSize"
        type = integer
        description = "Size of readout buffer in bytes"
      }
    ]
  },
  {
    name = "setContiguousDataBuffers"
    description = "Configure a ring buffer of N frames"
    requiredArgs = ["bufferSize", "count"]
    parameters = [
      {
        name = "bufferSize"
        type = integer
        description = "Size of each buffer frame in bytes"
      },
      {
        name = "count"
        type = integer
        description = "Number of contiguous buffers"
      }
    ]
  },
  {
    name = "startExposure"
    description = "Begin acquisition sequence"
    requiredArgs = ["exposureTime", "frameCount", "frameRate"]
    parameters = [
      {
        name = "exposureTime"
        type = float
        units = second
        description = "Integration time per frame"
      },
      {
        name = "frameCount"
        type = integer
        description = "Total number of frames"
      },
      {
        name = "frameRate"
        type = float
        units = hertz
        description = "Frames per second"
      }
    ]
  },
  {
    name = "stopExposure"
    description = "Stop ongoing acquisition"
    parameters = [ ]
  },
  {
    name = "softwareTrigger"
    description = "Fire software-triggered exposure (requires ExternalSoftware mode)"
    parameters = [ ]
  },
  {
    name = "setReadoutProcessingProfile"
    description = "Set internal image handling pipeline behavior"
    requiredArgs = ["profileName"]
    parameters = [
      {
        name = "profileName"
        enum = ["PREPROCESS_AND_PUBLISH", "STORE_HIGH_SPEED_DATA"]
        description = "Profile strategy for image processing"
      }
    ]
  }
]