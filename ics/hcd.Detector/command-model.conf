subsystem = APS
component = ICS.HCD.Detector

receive = [

  {
    name         = "configureCooling"
    description  = "Set cooling set-point and fan speed"
    requiredArgs = ["temperatureSetPoint", "fanSpeed"]

    parameters = [
      {
        name        = "temperatureSetPoint"
        type        = float
        units       = degC
        description = "Desired sensor temperature"
      },
      {
        name        = "fanSpeed"
        enum        = ["Off", "Low", "Medium", "High"]
        description = "Fan speed setting"
      }
    ]
  },

  {
    name         = "configureROI"
    description  = "Configure region of interest and binning"
    requiredArgs = ["roiLeft", "roiTop", "roiWidth", "roiHeight", "hBin", "vBin"]

    parameters = [
      {
        name        = "roiLeft"
        type        = integer
        units       = pix
        description = "Left column (0-based)"
      },
      {
        name        = "roiTop"
        type        = integer
        units       = pix
        description = "Top row (0-based)"
      },
      {
        name        = "roiWidth"
        type        = integer
        units       = pix
        description = "ROI width"
      },
      {
        name        = "roiHeight"
        type        = integer
        units       = pix
        description = "ROI height"
      }
    ]
  },

  {
    name = "configureBinning"
    description = "Configure horizontal and vertical on-chip binning factors."
    requiredArgs = ["hBin", "vBin"]
    parameters = [
      {
        name = "hBin"
        type = integer
        description = "Horizontal (X-axis) binning factor"
        minimum = 1
      }
      {
        name = "vBin"
        type = integer
        description = "Vertical (Y-axis) binning factor"
        minimum = 1
      }
    ]
  },

  {
    name         = "configureShutter"
    description  = "Configure shutter and trigger modes"
    requiredArgs = ["shutterMode", "triggerMode"]

    parameters = [
      {
        name        = "shutterMode"
        enum        = ["Closed", "Open", "Auto"]
        description = "Shutter behaviour"
      },
      {
        name        = "triggerMode"
        enum        = ["Internal", "Software", "External", "ExternalStart", "ExternalExposure"]
        description = "Trigger source"
      }
    ]
  },

  {
    name         = "configureDetector"
    description  = "Configure detector read-out parameters"
    requiredArgs = ["cycleMode", "gainMode", "pixelEncoding", "pixelReadoutRate"]

    parameters = [
      {
        name        = "cycleMode"
        enum        = ["Fixed", "Continuous"]
        description = "Acquisition cycle mode"
      },
      {
        name        = "gainMode"
        enum        = ["12-bit", "16-bit"]
        description = "Analog gain mode"
      },
      {
        name        = "pixelEncoding"
        enum        = ["Mono12", "Mono16"]
        description = "Pixel encoding format"
      },
      {
        name        = "pixelReadoutRate"
        enum        = ["100MHz", "200MHz"]
        description = "Pixel read-out clock"
      }
    ]
  },

  {
    name = "setDataBuffer"
    description = "Allocate a single shared-memory buffer for the next single-shot exposure."
    requiredArgs = [ "bufferSize", "path" ]
    parameters = [
      {
        name        = "bufferSize"
        description = "Size of the buffer in bytes."
        type        = integer
        units       = NoUnits
      },
      {
        name        = "path"
        description = "Absolute file path (or shm key) of the memory-mapped buffer."
        type        = string
      }
    ]
  },

  {
    name = "setContiguousDataBuffers"
    description = "Allocate a contiguous tranche of unique buffers for a burst exposure."
    requiredArgs = [ "bufferCount", "bufferSize", "basePath" ]
    parameters = [
      {
        name        = "bufferCount"
        description = "Number of buffers (frames) in the tranche."
        type        = integer
      },
      {
        name        = "bufferSize"
        description = "Size of each buffer in bytes."
        type        = integer
        units       = NoUnits
      },
      {
        name        = "basePath"
        description = "Prefix for the buffers: basePath_000, basePath_001, …"
        type        = string
      }
    ]
  },

  {
    name = "setLoopRingBuffer"
    description = "Allocate (or reconfigure) a reusable ring of shared-memory buffers for exposure loop mode."
    requiredArgs = [ "bufferCount", "bufferSize", "basePath" ]
    parameters = [
      {
        name        = "bufferCount"
        description = "Number of slots in the ring (default operational value = 3)."
        type        = integer
      },
      {
        name        = "bufferSize"
        description = "Size of each ring slot in bytes."
        type        = integer
        units       = NoUnits
      },
      {
        name        = "basePath"
        description = "Prefix for ring files: basePath_0 … basePath_{bufferCount-1}; slots are reused circularly."
        type        = string
      }
    ]
  },

  {
    name         = "spuriousNoiseFilter"
    description  = "Enable or disable the detector’s spurious-noise correction algorithm."
    requiredArgs = ["state"]

    parameters = [
      {
        name        = "state"
        enum        = ["ON", "OFF"]
        description = "Turn spurious-noise correction ON or OFF"
      }
    ]
  },

  {
    name         = "startExposure"
    description  = "Start the configured exposure"
    requiredArgs = ["integrationTime"]

    parameters = [
      {
        name        = "integrationTime"
        type        = float
        units       = second
        description = "Exposure duration (shutter open time)"
      }
    ]
  },
  {
    name        = "startBurst"
    description = "Begin a high-speed burst: N frames are integrated back-to-back into camera RAM and then drained to the contiguous shared-memory buffers previously allocated via setContiguousDataBuffers."

    requiredArgs = [ "integrationTime" ]

    parameters = [
      {
        name        = "integrationTime"
        type        = float
        units       = second
        description = "Exposure time for each frame in the burst."
      },
      {
        name        = "frameCount"
        type        = integer
        description = "Number of frames in the burst. If omitted, defaults to the bufferCount configured by setContiguousDataBuffers."
      }
    ]
  },

  {
    name = "stopExposure"
    description = "Abort an ongoing single-exposure or burst integration"
    parameters = [ ]
  },

  {
    name = "startExposureLoop"
    description = "Begin a continuous software-triggered exposure loop."
    requiredArgs = [ "integrationTime", "frameRate" ]
    parameters = [
      {
        name        = "integrationTime"
        description = "Per-frame integration time."
        type        = float
        units       = second
      },
      {
        name        = "frameRate"
        description = "Requested delivered frame rate."
        type        = float
        units       = hertz
      }
    ]
  },

  {
    name         = "stopExposureLoop"
    description  = "Stop an active exposure loop."
    requiredArgs = [ ]
    parameters   = [ ]
  },

  {
    name         = "pauseExposureLoop"
    description  = "Pause an active exposure loop."
    requiredArgs = [ ]
    parameters   = [ ]
  },

  {
    name         = "resumeExposureLoop"
    description  = "Resume a paused exposure loop."
    requiredArgs = [ ]
    parameters   = [ ]
  },

  {
    name         = "softwareTrigger"
    description  = "Fire software trigger (valid only when triggerMode = ExternalSoftware)"
    requiredArgs = [ ]
    parameters   = [ ]
  },
  
  {
    name         = "setDeviceProperty"
    description  = "Write an arbitrary Micro-Manager device property (useful for vendor-specific settings)."
    requiredArgs = ["propertyName", "value"]

    parameters = [
      {
        name        = "propertyName"
        type        = string
        description = "Exact name of the Micro-Manager property to set"
      },
      {
        name        = "value"
        type        = string
        description = "Value to assign (interpreted by the device adapter)"
      }
    ]
  },

  {
    name         = "getDeviceProperty"
    description  = "Read an arbitrary Micro-Manager device property."
    requiredArgs = ["propertyName"]

    parameters = [
      {
        name        = "propertyName"
        type        = string
        description = "Exact name of the Micro-Manager property to read"
      }
    ]
  },

  {
    name         = "resetCamera"
    description  = "Re-initialise the camera and its Micro-Manager device adapter."
    requiredArgs = [ ]
    parameters   = [ ]
  }

]
