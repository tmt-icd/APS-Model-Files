subsystem = APS
component = ICS.HCD.Detector

receive = [

  {
    name         = "configureCooling"
    description  = "Set cooling set-point and fan speed"
    requiredArgs = ["temperatureSetPoint", "fanSpeed"]

    parameters = [
      {
        name        = "temperatureSetPoint"
        type        = float
        units       = degC
        description = "Desired sensor temperature"
      },
      {
        name        = "fanSpeed"
        enum        = ["Off", "Low", "Medium", "High"]
        description = "Fan speed setting"
      }
    ]
  },

  {
    name         = "configureROI"
    description  = "Configure region of interest and binning"
    requiredArgs = ["roiLeft", "roiTop", "roiWidth", "roiHeight", "hBin", "vBin"]

    parameters = [
      {
        name        = "roiLeft"
        type        = integer
        units       = pix
        description = "Left column (0-based)"
      },
      {
        name        = "roiTop"
        type        = integer
        units       = pix
        description = "Top row (0-based)"
      },
      {
        name        = "roiWidth"
        type        = integer
        units       = pix
        description = "ROI width"
      },
      {
        name        = "roiHeight"
        type        = integer
        units       = pix
        description = "ROI height"
      },
      {
        name        = "hBin"
        type        = integer
        description = "Horizontal binning factor"
      },
      {
        name        = "vBin"
        type        = integer
        description = "Vertical binning factor"
      }
    ]
  },

  {
    name         = "configureShutter"
    description  = "Configure shutter and trigger modes"
    requiredArgs = ["shutterMode", "triggerMode"]

    parameters = [
      {
        name        = "shutterMode"
        enum        = ["Closed", "Open", "Auto"]
        description = "Shutter behaviour"
      },
      {
        name        = "triggerMode"
        enum        = ["Internal", "Software", "External", "ExternalStart", "ExternalExposure"]
        description = "Trigger source"
      }
    ]
  },

  {
    name         = "configureDetector"
    description  = "Configure detector read-out parameters"
    requiredArgs = ["cycleMode", "gainMode", "pixelEncoding", "pixelReadoutRate"]

    parameters = [
      {
        name        = "cycleMode"
        enum        = ["Fixed", "Continuous"]
        description = "Acquisition cycle mode"
      },
      {
        name        = "gainMode"
        enum        = ["12-bit", "16-bit"]
        description = "Analog gain mode"
      },
      {
        name        = "pixelEncoding"
        enum        = ["Mono12", "Mono16"]
        description = "Pixel encoding format"
      },
      {
        name        = "pixelReadoutRate"
        enum        = ["100MHz", "200MHz"]
        description = "Pixel read-out clock"
      }
    ]
  },

  {
    name         = "setDataBuffer"
    description  = "Allocate single data buffer for read-out"
    requiredArgs = ["bufferSize"]

    parameters = [
      {
        name        = "bufferSize"
        type        = integer
        units       = NoUnits
        description = "Size of read-out buffer in bytes"
      }
    ]
  },

  {
    name         = "setContiguousDataBuffers"
    description  = "Configure a ring buffer of N contiguous frames"
    requiredArgs = ["bufferSize", "count"]

    parameters = [
      {
        name        = "bufferSize"
        type        = integer
        units       = NoUnits
        description = "Size of each buffer frame in bytes"
      },
      {
        name        = "count"
        type        = integer
        description = "Number of contiguous buffers"
      }
    ]
  },

  {
    name         = "readoutProcessingProfile"
    description  = "Select the on-camera read-out processing profile."
    requiredArgs = ["profileName"]

    parameters = [
      {
        name        = "profileName"
        enum        = ["PREPROCESS_AND_PUBLISH", "STORE_HIGH_SPEED_DATA"]
        description = "Processing profile applied by the detector firmware."
      }
    ]
  },

  {
    name         = "spuriousNoiseFilter"
    description  = "Enable or disable the detectorâ€™s spurious-noise correction algorithm."
    requiredArgs = ["state"]

    parameters = [
      {
        name        = "state"
        enum        = ["ON", "OFF"]
        description = "Turn spurious-noise correction ON or OFF"
      }
    ]
  },

  {
    name         = "takeExposure"
    description  = "Acquire a single image"
    requiredArgs = ["integrationTime"]

    parameters = [
      {
        name        = "integrationTime"
        type        = float
        units       = second
        description = "Shutter open time"
      }
    ]
  },

  {
    name = "stopExposure"
    description = "Abort an ongoing single-exposure integration or read-out"
    parameters = [ ]
  },

  {
    name         = "startContinuous"
    description  = "Begin continuous acquisition"
    requiredArgs = ["frameRate", "frameCount"]

    parameters = [
      {
        name        = "frameRate"
        type        = float
        units       = hertz
        description = "Requested frame rate"
      },
      {
        name        = "frameCount"
        type        = integer
        description = "Number of frames to acquire (0 = unlimited)"
      }
    ]
  },

  {
    name         = "stopContinuous"
    description  = "Stop an active continuous acquisition"
    requiredArgs = [ ]
    parameters   = [ ]
  },

  {
    name         = "softwareTrigger"
    description  = "Fire software trigger (valid only when triggerMode = ExternalSoftware)"
    requiredArgs = [ ]
    parameters   = [ ]
  },
  
  {
    name         = "setDeviceProperty"
    description  = "Write an arbitrary Micro-Manager device property (useful for vendor-specific settings)."
    requiredArgs = ["propertyName", "value"]

    parameters = [
      {
        name        = "propertyName"
        type        = string
        description = "Exact name of the Micro-Manager property to set"
      },
      {
        name        = "value"
        type        = string
        description = "Value to assign (interpreted by the device adapter)"
      }
    ]
  },

  {
    name         = "getDeviceProperty"
    description  = "Read an arbitrary Micro-Manager device property."
    requiredArgs = ["propertyName"]

    parameters = [
      {
        name        = "propertyName"
        type        = string
        description = "Exact name of the Micro-Manager property to read"
      }
    ]
  },

  {
    name         = "resetCamera"
    description  = "Re-initialise the camera and its Micro-Manager device adapter."
    requiredArgs = [ ]
    parameters   = [ ]
  }

]
