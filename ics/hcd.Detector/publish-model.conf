subsystem = APS
component = ICS.HCD.Detector

publish {

  # ────────────────────────────────────────────────────────────────
currentStates = [
  {
    name        = "currentState"
    description = "Detector HCD status."


    parameters = [

      {  # detector identity / profile
        name        = "detectorRole"
        type        = string
        description = "Profile role: APT, PIT, or PSH"
      },

      {  # acquisition / buffering context (added)
        name        = "acquisitionMode"
        enum        = ["SINGLE","LOOP","BURST"]
        description = "Current acquisition mode."
      },
      {
        name        = "bufferModel"
        enum        = ["SINGLE","TRANCHE","RING"]
        description = "Buffer allocation strategy."
      },
      {
        name        = "basePath"
        type        = string
        description = "Base/prefix for active shared-memory buffer files."
      },
      {
        name        = "deviceAdapter"
        type        = string
        description = "Active Micro-Manager device adapter (e.g. AndorSDK3)."
      },
      {  # cooling telemetry
        name        = "coolingState"
        enum        = ["Off","Stabilized","Cooling","Drift","NotStabilized","Fault","OverTemperature"]
        description = "Cooling system state"
      },
      {
        name        = "sensorTemperature"
        type        = float
        units       = degC
        description = "Sensor temperature"
      },
      {
        name        = "coolingTarget"
        type        = float
        units       = degC
        description = "Configured sensor temperature setpoint."
      },
      {
        name        = "coolingPower"
        type        = float
        units       = percent
        description = "TEC power or duty‐cycle"
      },

      {  # camera state
        name        = "cameraState"
        enum        = ["IDLE","BUSY","STREAMING","PAUSED","FAULT","RECOVERING"]
        description = "Exposure pipeline state"
      },

      {  # link / acquisition flags
        name        = "cameraPresent"
        type        = boolean
        description = "Camera detected"
      },

      {  # timing, buffer status
        name        = "integrationTime"
        type        = float
        units       = second
        description = "Integration time of last image"
      },
      {
        name        = "bufferCopyTime"
        type        = float
        units       = millisecond
        description = "Time to copy the most recent frame from µManager to shared memory (callback → copy complete)."
      },
      {
        name        = "frameRate"
        type        = float
        units       = hertz
        description = "Actual frame rate in continuous mode (0 for single exposure)"
      },
      {
        name        = "imageSizeBytes"
        type        = integer
        description = "Size of last image buffer in bytes"
      },
      {
        name        = "bufferCount"
        type        = integer
        description = "Number of shared‐disk buffers configured"
      },

      {  # shutter & trigger
        name        = "shutterMode"
        enum        = ["Closed","Open","Auto"]
        description = "Shutter mode"
      },
      {
        name        = "triggerMode"
        enum        = ["Internal","Software","External","ExternalStart","ExternalExposure"]
        description = "Trigger source"
      },

      {  # ROI geometry
        name        = "roiLeft"
        type        = integer
        units       = pix
        description = "ROI left column"
      },
      {
        name        = "roiTop"
        type        = integer
        units       = pix
        description = "ROI top row"
      },
      {
        name        = "roiWidth"
        type        = integer
        units       = pix
        description = "ROI width"
      },
      {
        name        = "roiHeight"
        type        = integer
        units       = pix
        description = "ROI height"
      },

      {  # binning
        name        = "hBin"
        type        = integer
        description = "Horizontal binning"
      },
      {
        name        = "vBin"
        type        = integer
        description = "Vertical binning"
      },

      {  # camera settings
        name        = "pixelType"
        enum        = ["MONO8","MONO12","MONO12PACKED","MONO16"]
        description = "Pixel sample format of acquired frames."
      },
      {
        name        = "gain"
        type        = integer
        description = "Linear sensor gain setting (0 if fixed or not supported)."
      },
      {
        name        = "readoutMode"
        type        = string
        description = "Camera readout / shuttering / speed mode (adapter-specific string)."
      },

      {  # error reporting
        name        = "errorCode"
        type        = integer
        description = "Last non‐zero SDK / adapter error code"
      },
      {
        name        = "errorMessage"
        type        = string
        description = "Human-readable description associated with the last non-zero errorCode."
      }
    ]
  }
]
events = [
  {
    name        = "FrameReady"
    description = "Per-frame notification in exposure loop mode: a ring-buffer slot has been filled and is safe for Assembly consumption."
    maxRate     = 0.1
    parameters = [
      {
        name        = "frameSeq"
        type        = long
        description = "Monotonic frame sequence number for the current loop session."
      },
      {
        name        = "ringIndex"
        type        = integer
        description = "Ring buffer slot just written (0..bufferCount-1)."
      },
      {
        name        = "bufferPath"
        type        = string
        description = "Absolute path (or shm key) of the filled slot."
      },
      {
        name        = "lastFrameTS"
        type        = taiDate
        description = "TAI Timestamp when the frame copy to shared memory completed."
      },
      {
        name        = "bufferCopyTime"
        type        = float
        units       = millisecond
        description = "Duration of the copy from µManager to shared memory for this frame."
      }
    ]
  }
]
}
