subsystem=APS
component=PEAS.AlignmentProcedureSequencerA
description=""""""
receive=[
# Procedure Startup Commands
	
	{
		name=alignmentProcedureStartup
		description="""The first step in on-sky procedures that do not need to acquire a new target"""
		completionType=longRunning
		requiredArgs=["filter", "pupilMask"]
		args=[
            {
				name=filter
				description="""The desired filter."""
				enum=[F890N, F891N, F850M, F750W, F810N, F630N, F865N]
			}
			{
				name=pupilMask
				description="""The desired pupilMask."""
				enum= [PH-2-0, SH-0, SH-2, SH-5, Clear]
			}
			{
				name=analogGainMode
				description="""Analog gain"""
				enum= [LOW, HIGH, HDR]
			}
		]
	}
	{
		name=alignmentProcedureNewStarStartup
		description="""The first step in an on-sky procedure that requires a new star target be aquired"""
		completionType=longRunning
		requiredArgs=["pitFilter", "pitPupilMask", "aptFilter", "aptIntTime", "pitIntTime", "pitToPshPrRotationOffset", "pitToPshPrScaleOffset", 
        "pitToPshPrXTranslationOffset", "pitToPshPrYTranslationOffset"]
		args=[
            {
				name=pitFilter
				description="""The PIT filter to use for the selected star."""
				enum=[F890N, F891N, F850M, F750W, F810N, F630N, F865N]
			}
			{
				name=pitPupilMask
				description="""The desired pupilMask."""
				enum= [PH-2-0, SH-0, SH-2, SH-5, Clear]
			}
            {
				name=pitIntTime
				description="""Default integration time hased on selected star for procedure."""
				type=float
                units=second
			}
            {
				name=aptFilter
				description="""the APT filter to use for selected star."""
				enum=[ND1, ND2, NB589, OPEN]
			}
            {
				name=aptIntTime
				description="""Default integration time hased on selected star for procedure"""
				type=float
				units=second
			}
            {
				name=aptGainMode
				description="""Fastest mode (12-bit) or high dynamic range (16-bit)"""
				enum=["12-BIT", "16-BIT"]
			}
            {
                name=pitToPshPrRotationOffset
                description="""PIT to PSH Pupil Registration offset (rotation).  Originating from most recent Pupil Registration Calibration Procedure"""
                type=float
                units=degree
            }
            {
                name=pitToPshPrScaleOffset
                description="""PIT to PSH Pupil Registration offset (scale).  Originating from most recent Pupil Registration Calibration Procedure"""
                type=float
            }
            {
                name=pitToPshPrXTranslationOffset
                description="""PIT to PSH Pupil Registration offset (x-translation).  Originating from most recent Pupil Registration Calibration Procedure"""
                type=float
                units=millimeter
            }
            {
                name=pitToPshPrYTranslationOffset
                description="""PIT to PSH Pupil Registration offset (y-translation).  Originating from most recent Pupil Registration Calibration Procedure"""
                type=float
                units=millimeter
            }

		]
	}
    	
# Operating Modes
    {
		name=omSetCalibrationSourceMode
		description="""Prerequisite Step in running reference beam calibration procedures.  Sets up ICS to use internal calibration as light source"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}	
    {
		name=omSetStimulusSourceMode
		description="""Prerequisite step in running stimulus calibration procedures.  Sets up ICS to use internal stimulus as light source"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}
    {
		name=omSetOnSkyMode
		description="""Prerequisite step in running any on-sky procedure.  Sets up ICS to use starlight as light source."""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
    }
    {
		name=omSetStandbyMode
		description="""Places APS instrument in standby mode"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}
    
# Instrument Self Tests
    
    {
		name=aptSetupAptSelfTest
		description="""Sets up the instrument for the APT self test"""
		completionType=longRunning
		requiredArgs=[]
		args=[
            {
                name=sourceIntensity
                description="""The source intensity (% of max) of the Stimulus source."""
                type=float
            }

			{
				name=roistartRow
				description="""start row of ROI."""
				type=integer
				units=pix
			}
			{
				name=roistartCol
				description="""start col of ROI."""
				type=integer
				units=pix
			}
			{
				name=roiwidth
				description="""width of ROI"""
				type=integer
				units=pix
			}
			{
				name=roiheight
				description="""height of ROI"""
				type=integer
				units=pix
			}
			{
				name=rowBinning
				description="""binning of rows"""
				type=integer
				units=pix
			}
			{
				name=colBinning
				description="""binning of columns"""
				type=integer
				units=pix
			}
        ]
	}
    {
		name=aptTakeAptSelfTestExposure
		description="""Takes an APT self test exposure"""
		completionType=longRunning
		requiredArgs=["filter", "integrationTime"]
		args=[
			{
				name=filter
				description="""The name of the filter to position into the beam"""
				enum= [ND1, ND2, NB589, OPEN]
			}
            {
				name=integrationTime
				description="""Integration time."""
				type=float
				units=second
			}
			{
				name=gainMode
				description="""Fastest mode (12-bit) or high dynamic range (16-bit)"""
				enum=["12-BIT", "16-BIT"]
			}
		]
	}
    {
		name=aptCompareAptSelfTestImages
		description="""APT Self Test: Loads each image into the computation assembly and finds the centroid locations"""
		completionType=longRunning
        requiredArgs=[]
		args=[
		]
	}
    {
		name=pitSetupPitSelfTest
		description="""Configures the PIT detector, pupil mask and filter for the PIT self test"""
		completionType=longRunning
		requiredArgs=["filter", "pupilMask"]
		args=[
            {
				name=filter
				description="""The desired filter."""
				enum=[F890N, F891N, F850M, F750W, F810N, F630N, F865N]
			}
			{
				name=pupilMask
				description="""The desired pupilMask."""
				enum= [PH-2-0, SH-0, SH-2, SH-5, Clear]
			}
            {
                name=sourceIntensity
                description="""The source intensity (% of max) of the Stimulus source."""
                type=float
            }

			{
				name=roiStartRow
				description="""start row of ROI."""
				type=integer
				units=pix
			}
			{
				name=rotStartCol
				description="""start col of ROI."""
				type=integer
				units=pix
			}
			{
				name=roiWidth
				description="""width of ROI"""
				type=integer
				units=pix
			}
			{
				name=roiHeight
				description="""height of ROI"""
				type=integer
				units=pix
			}
            {
                name=rowBinning
                description="""row binning"""
                type=integer
                units=pix
            }
            {
                name=colBinning
                description="""column binning"""
                type=integer
                units=pix
            }
		]
	}
    {
		name=pitTakePitSelfTestExposure
		description="""Called multiple times within the PIT self test, to take PIT detector exposure for different K-Mirror rotations and tilt plate positions"""
		completionType=longRunning
		requiredArgs=["kMirrorPos", "tiltPlateXPos", "tiltPlateYPos"]
		args=[
			{
				name=kMirrorPos
				description="""The desired k-mirror position."""
				type=float
                units=degree
			}
			{
				name=tiltPlateXPos
				description="""The desired tilt plate X position."""
				type=float
                units=millimeter
			}
			{
				name=tiltPlateYPos
				description="""The desired tilt plate Y position."""
				type=float
                units=millimeter
			}
            {
				name=integrationTime
				description="""Integration time."""
				type=float
				units=second
			}            
			{
				name=analogGainMode
				description="""Analog gain"""
				enum= [LOW, HIGH, HDR]
			}

		]
	}
	
    {
		name=pitCompareSelfTestPrErrors
		description="""Used In PIT Self Test procedure. Calculates the pupil registration errors from each exposure taken using offsets in tip/tilt and offsets in K-Mirror rotation and with no offsets, and compares with expected differences between nominal and offset derived exposures to confirm that the expected misregistration is found.  The PIT self test fails if the expected misregistrations differ by a  configurable threshold in the computation assembly"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}
    {
		name=pshSetupPshSelfTestExposure
		description="""Setup PSH Optical Arm for taking an exposure during the PSH self test"""
		completionType=longRunning
		requiredArgs=["pupilMask", "filter"]
		args=[
			{
				name=filter
				description="""The name of the filter to position into the beam"""
				enum= [F890N, F891N, F850M, F750W, F810N, F630N, F865N]
			}
            {
				name=pupilMask
				description="""The name of the pupilMask to position into the beam"""
				enum= [PH-2-0, SH-0, SH-2, SH-5, Clear]
			}
            {
				name=sourceIntensity
				description="""The source intensity (% of max).  Only used if optic to position is  CALIBRATION_SOURCE"""
				type=float
			}
            {
				name=roiStartRow
				description="""start row of ROI."""
				type=integer
				units=pix
			}
			{
				name=rotStartCol
				description="""start col of ROI."""
				type=integer
				units=pix
			}
			{
				name=roiWidth
				description="""width of ROI"""
				type=integer
				units=pix
			}
			{
				name=roiHeight
				description="""height of ROI"""
				type=integer
				units=pix
			}
            {
                name=binning
                description="""row and column binning"""
                type=integer
                units=pix
            }


		]
	}
    {
		name=pshTakePshSelfTestExposure
		description="""Take a PSH self test exposure"""
		completionType=longRunning
		requiredArgs=["integrationTime"]
		args=[
			{
				name=integrationTime
				description="""Integration time."""
				type=float
				units=second
			}
            {
				name=analogGainMode
				description="""Analog gain"""
				enum= [LOW, HIGH, HDR]
			}


		]
	}
    {
		name=pshFindCentroids
		description="""Used by PSH Self Test Procedure. Find the centroids in the PSH exposure just taken"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}
    {
		name=pshTestSubimagesFoundAndImageCentered
		description="""Used by PSH Self Test Procedure. Tests for all subimages found and image centered within a threshold and average subimage intensity within a threshold.  If one of these criteria is not met, the self-test is aborted """
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}
    {
		name=mcstSetup
		description="""Setup for Motion Control Self Test. Sets the K-Mirror to Manual mode"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}
    {
		name=mcstMoveAllStages
		description="""Used within Motion Control Self Test.  For each stage, reads in configuration values for self-test positions and commands each stage to each of their self test positions"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}
    {
		name=mcstMoveAllWheels
		description="""Used within Motion Control Self Test.  For each wheel, reads in configuration values for self-test positions and commands each stage to each of their self test positions"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}
    {
		name=mcstStoreResults
		description="""Used within Motion Control Self Test.  Generates a list of stages and wheels and success/fail status of the test and stores these in the APS-PEAS database.  Sequence should return true if all tests completed successfully."""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}
    
# Calibration Tests
    
    {
		name=pocSetupForPointingOffsetsCalibration
		description="""Sets up the APT, PSH and PIT detectors, masks and filters for calibration test"""
		completionType=longRunning
		requiredArgs=["aptFilter", "pitFilter", "pshFilter", "pitPupilMask", "pshPupilMask"]
		args=[
            {
				name=aptFilter
				description="""The name of the filter to position into the beam"""
				enum= [ND1, ND2, NB589, OPEN]
			}
            {
				name=pitFilter
				description="""The name of the filter to position into the beam"""
				enum= [F890N, F891N, F850M, F750W, F810N, F630N, F865N]
			}
            {
				name=pshFilter
				description="""The name of the filter to position into the beam"""
				enum= [F890N, F891N, F850M, F750W, F810N, F630N, F865N]
			}
            {
				name=pitPupilMask
				description="""The name of the pupilMask to position into the beam"""
				enum= [PH-2-0, SH-0, SH-2, SH-5, Clear]
			}
            {
				name=pshPupilMask
				description="""The name of the pupilMask to position into the beam"""
				enum= [PH-2-0, SH-0, SH-2, SH-5, Clear]
			}
            {
				name=aptRoiStartRow
				description="""start row of ROI."""
				type=integer
				units=pix
			}
			{
				name=aptRoiStartCol
				description="""start col of ROI."""
				type=integer
				units=pix
			}
			{
				name=aptRoiWidth
				description="""width of ROI"""
				type=integer
				units=pix
			}
			{
				name=aptRoiHeight
				description="""height of ROI"""
				type=integer
				units=pix
			}
            {
                name=aptRowBinning
                description="""APT row binning"""
                type=integer
                units=pix
            }
            {
                name=aptColBinning
                description="""APT column binning"""
                type=integer
                units=pix
            }

            {
				name=pitRoiStartRow
				description="""start row of ROI."""
				type=integer
				units=pix
			}
			{
				name=pitRoiStartCol
				description="""start col of ROI."""
				type=integer
				units=pix
			}
			{
				name=pitRoiWidth
				description="""width of ROI"""
				type=integer
				units=pix
			}
			{
				name=pitRoiHeight
				description="""height of ROI"""
				type=integer
				units=pix
			}
            {
                name=pitBinning
                description="""PIT row and columns binning"""
                type=integer
                units=pix
            }


            {
				name=pshRoiStartRow
				description="""start row of ROI."""
				type=integer
				units=pix
			}
			{
				name=pshRoiStartCol
				description="""start col of ROI."""
				type=integer
				units=pix
			}
			{
				name=pshRoiWidth
				description="""width of ROI"""
				type=integer
				units=pix
			}
			{
				name=pshRoiHeight
				description="""height of ROI"""
				type=integer
				units=pix
			}

            {
                name=pshBinning
                description="""PSH row and column binning"""
                type=integer
                units=pix
            }

            {
                name=sourceIntensity
                description="""The source intensity (% of max) of the Stimulus source"""
                type=float
            }

        
		]
	}
    {
		name=pocTakeExposuresAndFindImageCenters
		description="""Used within Pointing Offsets Calibration Procedure.  Takes exposures with APT, PIT and PSH detectors and call computation assembly functions to find the PIT image center and PSH image center.  These values are stored automatically in the database by the computation assembly"""
		completionType=longRunning
		requiredArgs=["aptIntTime", "pitIntTime", "pshIntTime"]
		args=[
            {
				name=aptIntTime
				description="""APT Camera Integration time."""
				type=float
				units=second
			}
            {
				name=aptAnalogGainMode
				description="""Analog gain"""
				enum= [LOW, HIGH, HDR]
			}

            {
				name=pitIntTime
				description="""PIT Camera Integration time."""
				type=float
				units=second
			}
            {
				name=pitAnalogGainMode
				description="""Analog gain"""
				enum= [LOW, HIGH, HDR]
			}

            {
				name=pshIntTime
				description="""PSH Camera Integration time."""
				type=float
				units=second
			}
            {
				name=pshAnalogGainMode
				description="""Analog gain"""
				enum= [LOW, HIGH, HDR]
			}
		]
	}
    {
		name=rbcSetupRefBeamCalibration
		description="""Setup for refererence beam calibration procedure"""
		completionType=longRunning
		requiredArgs=["kMirrorStartPosition"]
		args=[
            {
				name=kMirrorStartPosition
				description="""The K-Mirror will be moved by increments through 360 degrees.  This defines the starting position."""
				type=float
				units=second
			}

		]
	}
    {
		name=rbcSelectFiltersAndMasks
		description="""Used within Reference Beam Calibration Procedure.  Sets the cameara configuration (ROI, gain), the pupil mask and filter for the PIT and PSH"""
		completionType=longRunning
		requiredArgs=["pitFilter", "pshFilter", "pitPupilMask", "pshPupilMask"]
		args=[
            {
				name=pitFilter
				description="""The name of the filter to position into the beam"""
				enum= [F890N, F891N, F850M, F750W, F810N, F630N, F865N]
			}
            {
				name=pshFilter
				description="""The name of the filter to position into the beam"""
				enum= [F890N, F891N, F850M, F750W, F810N, F630N, F865N]
			}
            {
				name=pitPupilMask
				description="""The name of the pupilMask to position into the beam"""
				enum= [PH-2-0, SH-0, SH-2, SH-5, Clear]
			}
            {
				name=pshPupilMask
				description="""The name of the pupilMask to position into the beam"""
				enum= [PH-2-0, SH-0, SH-2, SH-5, Clear]
			}
            {
				name=pitRoiStartRow
				description="""start row of ROI."""
				type=integer
				units=pix
			}
			{
				name=pitRoiStartCol
				description="""start col of ROI."""
				type=integer
				units=pix
			}
			{
				name=pitRoiWidth
				description="""width of ROI"""
				type=integer
				units=pix
			}
			{
				name=pitRoiHeight
				description="""height of ROI"""
				type=integer
				units=pix
			}
            {
                name=pitBinning
                description="""PIT row and column binning"""
                type=integer
                units=pix
            }
            
            
            {
				name=pshRoiStartRow
				description="""start row of ROI."""
				type=integer
				units=pix
			}
			{
				name=pshRoiStartCol
				description="""start col of ROI."""
				type=integer
				units=pix
			}
			{
				name=pshRoiWidth
				description="""width of ROI"""
				type=integer
				units=pix
			}
			{
				name=pshRoiHeight
				description="""height of ROI"""
				type=integer
				units=pix
            }
            {
                name=pshBinning
                description="""PSH row and column binning"""
                type=integer
                units=pix
            }

            
            {
                name=sourceIntensity
                description="""The source intensity (% of max) of the Calibration source"""
                type=float
            }

        ]
	}
    {
		name=rbcTakeDataForKMirrorPosition
		description="""Used within Reference Beam Calibration Procedure.  Takes PIT and PSH Exposures and finds Centroids.  Moves K-Mirror to next relative position by a step incerement"""
		completionType=longRunning
		requiredArgs=["stepIncrement", "pitIntTime", "pshIntTime"]
		args=[
            {
				name=pitIntTime
				description="""PIT Camera Integration time."""
				type=float
				units=second
			}
        	{
				name=pitAnalogGainMode
				description="""Analog gain"""
				enum= [LOW, HIGH, HDR]
			}


            {
				name=pshIntTime
				description="""PSH Camera Integration time."""
				type=float
				units=second
			}
            {
				name=pshAnalogGainMode
				description="""Analog gain"""
				enum= [LOW, HIGH, HDR]
			}


			{
				name=stepIncrement
				description="""Increment to move the K-Mirror after taking exposures"""
				type=float
				units=degree
			}
		]
	}
    {
		name=rbcCleanup
		description="""Used within Reference Beam Calibration Procedure.  Restores K-Mirror to its default position"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}
    {
		name=prcSetup
		description="""Configure PIT/PSH camera config, filters and pupil masks for PR calibration test"""
		completionType=longRunning
		requiredArgs=["pitFilter", "pshFilter", "pitPupilMask", "pshPupilMask"]
		args=[
            {
				name=pitFilter
				description="""The name of the filter to position into the beam"""
				enum= [F890N, F891N, F850M, F750W, F810N, F630N, F865N]
			}
            {
				name=pshFilter
				description="""The name of the filter to position into the beam"""
				enum= [F890N, F891N, F850M, F750W, F810N, F630N, F865N]
			}
            {
				name=pitPupilMask
				description="""The name of the pupilMask to position into the beam"""
				enum= [PH-2-0, SH-0, SH-2, SH-5, Clear]
			}
            {
				name=pshPupilMask
				description="""The name of the pupilMask to position into the beam"""
				enum= [PH-2-0, SH-0, SH-2, SH-5, Clear]
			}
            {
				name=pitRoiStartRow
				description="""start row of ROI."""
				type=integer
				units=pix
			}
			{
				name=pitRoiStartCol
				description="""start col of ROI."""
				type=integer
				units=pix
			}
			{
				name=pitRoiWidth
				description="""width of ROI"""
				type=integer
				units=pix
			}
			{
				name=pitRoiHeight
				description="""height of ROI"""
				type=integer
				units=pix
			}
            {
				name=pshRoiStartRow
				description="""start row of ROI."""
				type=integer
				units=pix
			}
			{
				name=pshRoiStartCol
				description="""start col of ROI."""
				type=integer
				units=pix
			}
			{
				name=pshRoiWidth
				description="""width of ROI"""
				type=integer
				units=pix
			}
			{
				name=pshRoiHeight
				description="""height of ROI"""
				type=integer
				units=pix
			}
            {
                name=pitBinning
                description="""PIT row and column binning"""
                type=integer
                units=pix
            }
            {
                name=pshBinning
                description="""PSH row and column binning"""
                type=integer
                units=pix
            }

            {
                name=sourceIntensity
                description="""The source intensity (% of max) of the Stimulus source"""
                type=float
            }

        ]
	}
    {
		name=prcBringPshPrWithinTolerance
		description="""Used within Pupil Registration Calibration Procedure.  Loops over taking and storing PSH exposure and performing the pupil registration derivation for the exposure.  If the PR errors are outside tolerances, position the tilt plate, K-Mirror and collimator to offset errors in pupil translation, rotation and scale.  Repeat loop until offsets are within tolerances. """
		completionType=longRunning
		requiredArgs=["pshIntTime", "xTolerance", "yTolerance", "rotationTolerance", "scaleTolerance"]
		args=[

            {
				name=pshIntTime
				description="""PSH Camera Integration time."""
				type=float
				units=second
			}
			{
				name=pshAnalogGainMode
				description="""Analog gain"""
				enum= [LOW, HIGH, HDR]
			}

            {
			 	name=xTolerance
				description="""PR error tolerance for x-translation """
				type=float
				units=millimeter
			}
            {
				name=yTolerance
				description="""PR error tolerance for y-translation"""
				type=float
				units=millimeter
			}
            {
				name=rotationTolerance
				description="""PR error tolerance for rotation"""
				type=float
				units=degree
			}
            {
				name=scaleTolerance
				description="""PR error tolerance for scale (percent)"""
				type=float
			}

		]
	}
    {
		name=prcCalcPitToPshPrOffsets
		description="""Used within Pupil Registration Calibration Procedure.  Take a PIT Exposure, calculate pupil registration and the offsets between the PSH and PSH pupil registration"""
		completionType=longRunning
		requiredArgs=["pitIntTime"]
		args=[
            {
				name=pitIntTime
				description="""PIT Camera Integration time."""
				type=float
				units=second
			}
            {
				name=pitAnalogGainMode
				description="""Analog gain"""
				enum= [LOW, HIGH, HDR]
			}

		]
	}
    {
		name=prcSavePitClosedLoopFocOpticsPositions
		description="""Used within Pupil Registration Calibration Procedure.  Starts PIT Loop, waits for PIT Loop to Stabilize by subscribing to the PIT Loop status event.  Once stabilized, reads from the K-Mirror, Collimator and TiltPlate axisStatusEvents and stores these values in the APS-PEAS Database.  When completed, stop the PIT loop."""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}

# On-Sky Procedures
# Coarse Tilt Alignment

    {
		name=ctaFindAllSegmentsLoop
		description="""Used within Coarse Tilt Alignment Procedure.  Finds all segments using spiral search loop"""
		completionType=longRunning
		requiredArgs=["integrationTime", "maxRasterSearchSteps", "rasterStepSize", "ctaB1SerializedSequence"]
		args=[
            {
				name=integrationTime
				description="""PSH Camera Integration time."""
				type=float
				units=second
			}
            {
				name=pitAnalogGainMode
				description="""Analog gain"""
				enum= [LOW, HIGH, HDR]
			}
            {
				name=maxRasterSearchSteps
				description="""The maximum number of raster search steps"""
				type=integer
			}
            {
				name=rasterStepSize
				description="""The size of raster search steps"""
				type=float
                units=arcsec
			}
            {
				name=ctaB1SerializedSequence
				description="""Serialized sequence to be deserialized and submitted to sequencer B.  This is the first of two sequences submitted from sequencer A to sequencer B within the Coarse Tilt Alignmnent Procedure."""
				type=string
			}

		]
	}

    {
		name=ctaEvalResultsCmdM1andTel
		description="""Used within Coarse Tilt Alignment Procedure.  If all segments found, each segment Piston/Tip/Tilt results are calculated and displayed, the operator is displayed the commands to bring segment current positions into capture range for phasing 1000 and commands sent on operator response.  In parallel the telescope pointing offsets are calculated to center the image and cmds sent to TCS. """
		completionType=longRunning
		requiredArgs=["ctaB2SerializedSequence", "ctaC1SerializedSequence"]
		args=[
            {
				name=ctaB2SerializedSequence
				description="""Serialized sequence to be deserialized and submitted to sequencer B.  This is the second of two sequences submitted from sequencer A to sequencer B within the Coarse Tilt Alignmnent Procedure."""
				type=string
			}
            {
				name=ctaC1SerializedSequence
				description="""Serialized sequence to be deserialized and submitted to sequencer C.  This sequence is submitted from sequencer A to sequencer C within the Coarse Tilt Alignmnent Procedure."""
				type=string
			}

		]
	}
    
# Rigid Body and Segment Figure

    {
		name=rbsfGetCurrentWhSettings
		description="""Used within Rigid Body and Segment Figure Procedure.  Gets all Warping Harness configurations and current strains for each actuator"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}

    {
		name=rbsfTakeExposureWhileProcessingPrevious
		description="""Used within Rigid Body and Segment Figure Procedure.  Takes a PSH exposure, calculates centroids, image and pupil registration offsets and publishes these to the PIT loop, while in parallel calculates - for the previous exposure - centroid offsets, M2 PTT, M2 PXY decenter, Segment PTT, Segment Zernikes and Segment Warping Harness commands"""
		completionType=longRunning
		requiredArgs=["iterationIndex", "exposureCount", "rbsfB1SerializedSequence", "rbsfC1SerializedSequence"]
		args=[
            {
				name=iterationIndex
				description="""The current iteration index"""
				type=integer
			}
            {
				name=exposureCount
				description="""The total number of exposures"""
				type=integer
			}
            {
				name=rbsfB1SerializedSequence
				description="""Serialized sequence to be deserialized and submitted to sequencer B.  This is the first of three sequences submitted from sequencer A to sequencer B within the Rigid Body and Segment Figure Alignmnent Procedure."""
				type=string
			}
            {
				name=rbsfC1SerializedSequence
				description="""Serialized sequence to be deserialized and submitted to sequencer C.  This is the first of three sequences submitted from sequencer A to sequencer C within the Rigid Body and Segment Figure  Alignmnent Procedure."""
				type=string
			}

		]
	}

    {
		name=rbsfCalcAverages
		description="""Used within Rigid Body and Segment Figure Procedure.  Calculates averages over the exposures taken of: centroid offsets, M2 PTT, M2 PXY decenter, Segment PTT and Segment Zernikes"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}

    {
		name=rbsfRenderAvgCentroidOffsetsDisplay
		description="""Renders the Average Centroid Offsets display to the PEAS user interface"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}

    {
		name=rbsfRenderM1CmdsDisplay
		description="""Renders the M1 Cmds display to the PEAS user interface."""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}

    {
		name=rbsfAskOpIfCmdM1
		description="""Renders a prompt on the PEAS user interface displaying M1 cmd information and asking the operator if M1 cmds should be sent"""
		completionType=longRunning
		requiredArgs=[]
		args=[
            {
 				name=promptAutoResponse
				description="""If this argument is present, no user interface prompt is rendered and the value of this argument is taken as the user response."""
                enum=[YES, NO]
            }

		]
	}

    {
		name=rbsfCmdM1CalcWhCmdsWhileAskOpCmdM2
		description="""Used within Rigid Body and Segment Figure Procedure.  If the operator response to the M1 cmd prompt was in the affirmative, commands are sent to M1 and warping harness commands are calculated.  In parallel, renders a prompt on the PEAS user interface displaying M2 commands and asking the operator if the M2 cmds should be sent."""
		completionType=longRunning
		requiredArgs=["rbsfB2SerializedSequence", "rbsfC2SerializedSequence"]
		args=[
            {
				name=rbsfB2SerializedSequence
				description="""Serialized sequence to be deserialized and submitted to sequencer B.  This is the second of three sequences submitted from sequencer A to sequencer B within the Rigid Body and Segment Figure Alignmnent Procedure."""
				type=string
			}
            {
				name=rbsfC2SerializedSequence
				description="""Serialized sequence to be deserialized and submitted to sequencer C.  This is the second of three sequences submitted from sequencer A to sequencer C within the Rigid Body and Segment Figure  Alignmnent Procedure."""
				type=string
			}

		]
	}

    {
		name=rbsfAskAndCmdWhWhileCmdM2
		description="""Used within Rigid Body and Segment Figure Procedure.  Performs two operations in parallel: 1. Renders the WH harness display on the PEAS user interface, and after receiving operator response, renders a prompt on the PEAS user asking the operator if warping harness cmds should be sent.  If the response is affirmative, warping harness cmds are sent.  Once all commands are complete, the state of M1 sensor calibrations are saved.  2. If the operator response to sending M2 cmds was in the affirmative, M2 commands are sent for either piston tip and tilt or piston and x,y decenter depending on the m2CommandMethod.  Once completed, the aligned M2 state save cmd is sent to TCS to save this M2 state as an aligned state."""
		completionType=longRunning
		requiredArgs=["rbsfB3SerializedSequence", "rbsfC3SerializedSequence"]
		args=[
            {
				name=rbsfB3SerializedSequence
				description="""Serialized sequence to be deserialized and submitted to sequencer B.  This is the third of three sequences submitted from sequencer A to sequencer B within the Rigid Body and Segment Figure Alignmnent Procedure."""
				type=string
			}
            {
				name=rbsfC3SerializedSequence
				description="""Serialized sequence to be deserialized and submitted to sequencer C.  This is the third of three sequences submitted from sequencer A to sequencer C within the Rigid Body and Segment Figure  Alignmnent Procedure."""
				type=string
			}

		]
	}

# Broadband Phasing

    {
		name=bbpTakeExposureWhileProcessingPrevious
		description="""Used within Broadband Phasing Procedure.  Calculates and sends the M1 segments colorstep cmds for the current colorstep index and when M1 segment pistons are completed, takes a PSH exposure, calculates centroids and calculates the image and pupil registration offsets and publishes these to the PIT loop.  In parallel, coherence and correlation parameters are calculated for the previous exposure."""
		completionType=longRunning
		requiredArgs=["colorStepIndex", "colorStepCount", "bbpB1SerializedSequence", "bbpC1SerializedSequence"]
		args=[
            {
 				name=colorStepIndex
				description="""The current color step index number."""
                type=integer
            }
            {
 				name=colorStepCount
				description="""The total number of color steps."""
                type=integer
            }
            {
				name=bbpB1SerializedSequence
				description="""Serialized sequence to be deserialized and submitted to sequencer B.  This is the first of two sequences submitted from sequencer A to sequencer B within the Broadband Phasing Alignmnent Procedure."""
				type=string
			}
            {
				name=bbpC1SerializedSequence
				description="""Serialized sequence to be deserialized and submitted to sequencer C.  This is the first of two sequences submitted from sequencer A to sequencer C within the Broadband Phasing Alignmnent Procedure."""
				type=string
			}

		]
	}

    {
		name=bbpRestoreM1WhileCalcPhasingCmds
		description="""Used within Broadband Phasing Procedure.  The M1 segment positions are restored to their pre-procedure positions while in parallel phasing commands are calculated"""
		completionType=longRunning
		requiredArgs=["colorStepCount", "bbpB2SerializedSequence", "bbpC2SerializedSequence"]
		args=[
            {
 				name=colorStepCount
				description="""The number of color steps."""
                type=integer
            }
            {
				name=bbpB2SerializedSequence
				description="""Serialized sequence to be deserialized and submitted to sequencer B.  This is the second of two sequences submitted from sequencer A to sequencer B within the Broadband Phasing Alignmnent Procedure."""
				type=string
			}
            {
				name=bbpC2SerializedSequence
				description="""Serialized sequence to be deserialized and submitted to sequencer C.  This is the second of two sequences submitted from sequencer A to sequencer C within the Broadband Phasing Alignmnent Procedure."""
				type=string
			}

		]
	}
    

    {
		name=bbpAskOpIfCmdM1
		description="""Used within Broadband Phasing Procedure.  Renders a user prompt on the PEAS user interface that asks the operator if cmds to M1 should be sent"""
		completionType=longRunning
		requiredArgs=[]
		args=[
            {
 				name=promptAutoResponse
				description="""If this argument is present, no user interface prompt is rendered and the value of this argument is taken as the user response."""
                enum=[YES, NO]
            }
		]
	}

    {
		name=bbpCmdM1SegAndTakeSnapIfRespOk
		description="""Used within Broadband Phasing Procedure.  If operator responded in the affirmative to sending M1 commands, the commands are sent and when completed the M1 save of sensor calibration data command is sent to M1"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}

    {
		name=bbpAskOpIfOffloadSensorOffsetsToM1CS
		description="""Used within Broadband Phasing Procedure.  Renders a user prompt to the PEAS user interface asking the operator if Offload Sensor Offsets cmd should be sent to M1CS."""
		completionType=longRunning
		requiredArgs=[]
		args=[
            {
 				name=promptAutoResponse
				description="""If this argument is present, no user interface prompt is rendered and the value of this argument is taken as the user response."""
                enum=[YES, NO]
            }

		]
	}

    {
		name=bbpSendOffloadSensorOffsetsCmdIfRespOk
		description="""Used within Broadband Phasing Procedure.  If the user response to sending Offload Sensor Offsets cmd to M1CS was affirmative, the cmd is sent to M1CS."""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}
    
# Both Broadband and Narrowband Phasing

    {
		name=renderEdgeHeightsDisplay
		description="""Renders the Edge Heights visualization display on the PEAS user interface"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}

    {
		name=renderResidualEdgeHeightsDisplay
		description="""Renders the Residual Edge Heights visualization display on the PEAS user interface"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}

    {
		name=renderSegmentPistonsDisplay
		description="""Renders the Segment Pistons visualization display on the PEAS user interface"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}
    
    {
		name=restoreM1ToInitalPositions
		description="""Restores M1 segments to their positions at the procedure start."""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}

    
# Narrowband Phasing 

    {
		name=nbpSelectNthFilter
		description="""Used within Narrowband Phasing Procedure.  Set the PSH filter for an iteration"""
		completionType=longRunning
		requiredArgs=["pshFilter"]
		args=[
            {
				name=pshFilter
				description="""The name of the filter to position into the beam"""
				enum= [F890N, F891N, F850M, F750W, F810N, F630N, F865N]
			}

		]
	}

    {
		name=nbpTakeExposureWhileProcessingPrevious
		description="""Used within Narrowband Phasing Procedure.  Calculates and sends the M1 segments colorstep cmds for the current colorstep index and when M1 segment pistons are completed, takes a PSH exposure, calculates centroids and calculates the image and pupil registration offsets and publishes these to the PIT loop.  In parallel, coherence and correlation parameters are calculated for the previous exposure."""
		completionType=longRunning
		requiredArgs=["colorStepIndex", "colorStepCount", "nbpB1SerializedSequence", "nbpC1SerializedSequence"]
		args=[
            {
 				name=colorStepIndex
				description="""The current color step index number."""
                type=integer
            }
            {
 				name=colorStepCount
				description="""The total number of color steps."""
                type=integer
            }
            {
				name=nbpB1SerializedSequence
				description="""Serialized sequence to be deserialized and submitted to sequencer B.  This is the sequence submitted from sequencer A to sequencer B within the Narrowband Phasing Alignmnent Procedure."""
				type=string
			}
            {
				name=nbpC1SerializedSequence
				description="""Serialized sequence to be deserialized and submitted to sequencer C.  This is the sequence submitted from sequencer A to sequencer C within the Narrowband Phasing Alignmnent Procedure."""
				type=string
			}

		]
	}
    

    {
		name=nbpCalcPhasingCmds
		description="""Used within Narrowband Phasing Procedure.  Calculates the phasing commands for narrow band phasing"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}

    {
		name=nbpAskOpIfCmdM1
		description="""Used within Narrowband Phasing Procedure.  Renders a prompt on the PEAS user interface that asks the operator if M1 cmds should be sent."""
		completionType=longRunning
		requiredArgs=[]
		args=[
            {
 				name=promptAutoResponse
				description="""If this argument is present, no user interface prompt is rendered and the value of this argument is taken as the user response."""
                enum=[YES, NO]
            }

		]
	}
    
        {
		name=nbpCmdM1SegAndTakeSnapIfRespOk
		description="""Used within Narrowband Phasing Procedure.  If operator responded in the affirmative to sending M1 commands, the commands are sent and when completed the M1 save of sensor calibration data command is sent to M1"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}

    
# M3 Alignment

    {
		name=m3aWaitForPitToStabilize
		description="""Used within M3 Alignment Procedure.  Checks the value of the PIT Sequencer status event and completes when the PIT Loop state is CONVERGED"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}

    {
		name=m3aGetTiltPlatePosition
		description="""Used within M3 Alignment Procedure.  Reads the position values of the ICS Tilt Plate Assembly's x and y axes from the xAxisStatus and yAxisStatus events"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}
    
    {
		name=m3RetrievePrCalibrationTiltPlatePosition
		description="""Used within M3 Alignment Procedure.  Reads the tilt plate position from the last run of the Pupil Registration Calibration procedure from the PEAS database"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}

    {
		name=m3aCalcTelPrError
		description="""Used within M3 Alignment Procedure.  Calculates the telescope pupil registration error"""
		completionType=longRunning
		requiredArgs=["xTiltPlateCurrent", "yTiltPlateCurrent", "xTiltPlateCalibrated", "yTiltPlateCalibrated"]
		args=[     
            {
				name=xTiltPlateCurrent
				description="""The current value of the ICS Tilt Plate X axis"""
				type=float
                units=millimeter
			}
            {
				name=yTiltPlateCurrent
				description="""The current value of the ICS Tilt Plate Y axis"""
				type=float
                units=millimeter
			}
            {
				name=xTiltPlateCalibrated
				description="""The value of the ICS Tilt Plate X axis determined during the last execution of the Pupil Registration Calibration procedure"""
				type=float
                units=millimeter
			}
            {
				name=yTiltPlateCalibrated
				description="""The value of the ICS Tilt Plate Y axis determined during the last execution of the Pupil Registration Calibration procedure"""
				type=float
                units=millimeter
			}
		]
	}

    {
		name=m3aLoopUntilPrErrorWithinLimits
		description="""Used within M3 Alignment Procedure.  While PR errors are outside limits, loop over calculating and commanding the necessary tilt plate motion and M3 motion to correct error, start the PIT loop and wait for convergence and check the Tilt Plate position against calibrated position.  Each loop includes rendering a user prompt for the user to opt for an abort if the loop is not converging, restoring tilt plate and M3 to pre-procedure positions if abort is chosen."""
		completionType=longRunning
		requiredArgs=["xTelPrErrorLimit", "yTelPrErrorLimit", "nbpB1SerializedSequence"]
		args=[
            {
				name=xTelPrErrorLimit
				description="""The x telescope pupil registration error limit (mm at M1)"""
				type=float
                units=millimeter
			}
            {
				name=yTelPrErrorLimit
				description="""The y telescope pupil registration error limit (mm at M1)"""
				type=float
                units=millimeter
			}
            {
				name=nbpB1SerializedSequence
				description="""Serialized sequence to be deserialized and submitted to sequencer B.  This is the sequence submitted from sequencer A to sequencer B within the M3 Alignmnent Procedure."""
				type=string
			}

		]
	}

    {
		name=m3aIfSuccessfulTakeSnapshot
		description="""Used within M3 Alignment Procedure.  If the loop converged successfully, command M3 to save the current M3 position."""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}



# Off-Axis Measurements

    {
		name=oamMeasureZernikes
		description="""Used within the Off-Axis Alignment Procedure.  TODO: this off axis measurement step has been named but not yet defined in the APS OCDD"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}

    {
		name=oamStopGuidingLoop
		description="""Used within the Off-Axis Alignment Procedure.  Sends command to the guiding loop sequencer to stop the guiding loop and sends a command to the PIT loop sequencer to stop the PIT loop"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}

    {
		name=oamPrepareForOffAxis
		description="""Used within the Off-Axis Alignment Procedure.  Given a field point Az, EL offset: Offsets the telescope using the offsetTelescopePosAzEl command to TCS. At this point the star that was on-axis is now off-axis, but outside the APS field of view (assuming the offset command is larger than the APS FoV).  Then Tilts M3 to bring the star back on-axis using the command offsetImageLocationWithM3 to TCS, at this point the star is on-axis in APS, but the M1 pupil will be mis-registered and the star out of focus, both due to moving M3. Then pistons M2 to bring the star back in focus using the command offsetM2Position to TCS and tilts the ICS steeringBeamSplitterStage to move the M1 pupil back into alignment.  When completed, the PIT loop is restarted."""
		completionType=longRunning
		requiredArgs=["fieldPointAzOffset", "fieldPointElOffset"]
		args=[
            {
				name=fieldPointAzOffset
				description="""The azimuth offset of the off axis field point"""
				type=float
                units=degree
			}
            {
				name=fieldPointElOffset
				description="""The elevation offset of the off axis field point"""
				type=float
                units=degree
			}

		]
	}

    {
		name=oamSubtractDesignAbberations
		description="""Used within the Off-Axis Alignment Procedure.  Subtracts the telescope theorectial design abberations derived from ray tracing from the measured Zernikes"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}

    {
		name=oamRestorePositions
		description="""Used within the Off-Axis Alignment Procedure.  Repositions the ICS Steering Beam Splitter pre-field point selection position as well as clearing the telescope position offsets, M2 and M3 position offsets"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}

# Warping Harness Influence Functions

    {
		name=whifCalibrateWh
		description="""Used within the Warping Harness Influence Functions Procedure.  Calibrate new parameters for the warping harness strain vs motor position curve then position the motor to the minimum starting point of the zero strain deadband position."""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}

    {
		name=whifGetWhConfigSettings
		description="""Used within the Warping Harness Influence Functions Procedure.  Retreives the warping harness configuration parameters that the segment is using: strain limits, deadband offsets, strain slopes"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}

    {
		name=whifReadWhStrainsAndSave
		description="""Used within the Warping Harness Influence Functions Procedure.  Retrieves the force being applied by the warping harnesses for all of the segments installed on the telescope"""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}

    {
		name=whifZeroWhStrains
		description="""Used within the Warping Harness Influence Functions Procedure.  Set all warping harness strains so that strain gauges are zero."""
		completionType=longRunning
		requiredArgs=[]
		args=[
		]
	}

    {
		name=whifTestMotorAndPromptUserForNext
		description="""Used within the Warping Harness Influence Functions Procedure.  Main loop execution for a single motor number over all or a select number of segments.  Moves each segment motor to 0% of max force, 45% and -45%.  For each move, takes a number of PSH exposures, calculates centroids and centroid offsets from reference beam calibrated locations.  Averages the centroid offsets for the exposures.  When all averages are obtained for all three moves of the motor the operator is prompted if they want to move on to the next motor. """
		completionType=longRunning
		requiredArgs=["whifB1SerializedSequence"]
		args=[
            {
				name=segmentList
				description="""List of segment locations to use.  All locations are used if argument is missing."""
				type=string
			}
            {
				name=whifB1SerializedSequence
				description="""Serialized sequence to be deserialized and submitted to sequencer B.  This is the sequence submitted from sequencer A to sequencer B within the Warping Harness Influence Functions Procedure."""
				type=string
			}

		]
	}

    {
		name=whifRestoreSaveWhStateIfStrainsWereZeroed
		description="""Used within the Warping Harness Influence Functions Procedure.   If strains were set to zero at the start of the procedure, set all strains back to original forces read at the start of the procedure.  This is performed by sending M1CS cmd setWHStrains for each segment in the segment list.  If 492 segments are in the list, 492 commands will be sent to M1CS """
		completionType=longRunning
		requiredArgs=[]
		args=[
            {
				name=segmentList
				description="""List of segment locations to use.  All locations are used if argument is missing."""
				type=string
			}

		]
	}

# High Speed Segment Vibration Procedure

    {
		name=hsvSetupHighSpeedDataForSegmentSet
		description="""Used within the High Speed Segment Vibration Procedure.  Sets up the APT filter and sends M1CS actuator offset commands (m1csActuatorCmds parameter) to destack M1CS and fill the detector with select segment images, while tilting the remaining segments out of view.  The detector is set up with a gain and ROI from a set of predefined ROIs. """
		completionType=longRunning
		requiredArgs=["m1csActuatorCmds", "aptFilter", "integrationTime", "roiIdentifier", "frameRate", "duration"]
        args=[
			{
				name=m1csActuatorCmds
				description="""Array of [492,3] M1CS actuator offsets to apply"""
                type = array
                dimensions: [492,3]
                items = {
                    type = float
                    units = millimeter
                }
                units = millimeter
			}
            {
				name=aptFilter
				description="""The name of the APT filter to position into the beam"""
				enum= [ND1, ND2, NB589, OPEN]
			}

			{
				name=roiIdentifier
				description="""Identifier of predefined ROI (including binning) in the APT assembly configuration"""
				type=integer
				units=NoUnits
			}

			{
				name=aptAnalogGainMode
				description="""Analog gain"""
				enum= [LOW, HIGH, HDR]
			}
		]
	}
    {
		name=hsvTakeHighSpeedDataForSegmentSet
		description="""Used within the High Speed Segment Vibration Procedure.  Integration time, frame rate and duration of the frame taking are set and the APT camera is commanded to take the high speed data into a local buffer.  Once all data is taken it is stored on the APS Shared Disk. """
		completionType=longRunning
		requiredArgs=[ "integrationTime", "frameRate", "duration"]
        args=[

			{
				name=integrationTime
				description="""Integration time."""
				type=float
				units=second
			}
			{
				name=frameRate
				description="""frame rate (frames/sec). Must be less than the max frame rate associated with the High Speed predefined ROI."""
				type=integer
				units=NoUnits
			}
			{
				name=duration
				description="""Duration of high speed continuous exposure taking"""
				type=integer
				units=second
			}

		]
	}

]
send=[


    # APS-PEAS Sequencer B
    
    {
		name=takePshExposure
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
 	{

        name=startPitTracking
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=stopPitTracking
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=stopGuidingLoop
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=calcCentroids
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=displayCentroids
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=calcImageAndPrOffsets
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=correctPitTracking
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=setupPshOpticalArm
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=setupLineRefBeamCalibration
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
    }
    {
        name=takeDataForCurrentKMirrorPosition
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
    }
    {
		name=restoreFromInLineRefBeamCalibration
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
    }   
    {
        name=ctaCalcCentroidOffsets
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=ctaDisplayCentroidOffsets
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=ctaAdjustSegmentsNotFound
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=ctaCalcTelescopePointingOffset
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=ctaCmdTelescopeOffsetInPixels
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=rbsfAskOpIfCmdM2
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=rbsfCmdM2PttOrPxyIfRespOk
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=rbsfTakeSnapIfRespOk
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=bbpCalcColorstepM1Pistons
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=bbpRestoreM1ToInitialPositions
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=nbpCalcColorstepM1Pistons
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=nbpCmdM1CSMoves
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=nbpRestoreM1ToInitialPositions
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=m3aCalcTiltPlateMotion
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=m3aAdjustTiltPlateAndM3
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=m3aWaitForPitToStabilize
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=m3aGetTiltPlatePosition
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=m3aCalcTelPrError
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=m3aAskOpifAbort
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=m3aRestoreTiltPlateAndM3IfRespOk
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=whifCalcCentrioidOffsets
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=whifCalcAvgCentroidOffsets
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=whifApplyMotorMoveToAllSegsNthMotor
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    {
        name=whifAskUserIfContinueToNextMotor
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerB
	}
    
    # APS-PEAS Sequencer C

 
 	{
		name=setupForAcquisition
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerC
	}
    {
		name=acquireAndStartGuiding
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerC
	}
	{
		name=ctaCalcSegmentPtt
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerC
	}

	{
		name=ctaDisplaySegmentPttResults
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerC
	}
	{
		name=ctaAskOperatorIfCmdM1
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerC
	}

	{
		name=ctaCmdM1IfRespOk
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerC
	}
	{
		name=rbsfCalcCentroidOffsets
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerC
	}
	{
		name=rbsfCalcM2PistonTipTilt
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerC
	}
	{
		name=rbsfCalcM2PistonXYDecenter
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerC
	}
	{
		name=rbsfCalcSegmentPistonTipTilt
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerC
	}
	{
		name=rbsfCalcSegmentZernikes
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerC
	}
	{
		name=rbsfCmdM1IfRespOk
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerC
	}
	{
		name=rbsfCalcWhCmds
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerC
	}
	{
		name=rbsfRenderWhDisplay
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerC
	}
	{
		name=rbsfAskOpIfCmdWh
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerC
	}
	{
		name=rbsfCmdWhIfRespOk
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerC
	}
    {
		name=rbsfWaitM1CmdComplete
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerC
	}
	{
		name=rbsfTakeSnapIfM1OrWhCmdSent
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerC
	}
	{
		name=bbpCalcCoheranceAndCorrelationParams
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerC
	}
	{
		name=bbpCalcPhasingCmdsToOptimizeM1CSPhase
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerC
	}
	{
		name=nbpCalcCoheranceAndCorrelationParams
		subsystem=APS
		component=PEAS.AlignmentProcedureSequencerC
	}
    
    
    
    # PIT Loop Sequencer
    
    {
		name=setup
		subsystem=APS
		component=ICS.PIT.Sequencer
	}

    {
		name=stop
		subsystem=APS
		component=ICS.PIT.Sequencer
	}

    {
		name=startup
		subsystem=APS
		component=ICS.PIT.Sequencer
	}


    # ICS Sequencer
    
    {
		name=setupAptAcquisitionSettings
		subsystem=APS
		component=ICS.ICS.Sequencer
	}


    # ICS Components


    # Detector cmds

    {
		name=configDetector
		subsystem=APS
		component=ICS.APT.Detector
	}
    {
		name=configureDetector
		subsystem=APS
		component=ICS.PIT.Detector
	}
    {
		name=configureDetector
		subsystem=APS
		component=ICS.PSH.Detector
	}
    {
		name=takeAndStoreExposure
		subsystem=APS
		component=ICS.APT.Detector
	}
    {
		name=takeAndStoreExposure
		subsystem=APS
		component=ICS.PIT.Detector
	}
    {
		name=takeExposure
		subsystem=APS
		component=ICS.PSH.Detector
	}
    {
		name=storeExposure
		subsystem=APS
		component=ICS.PSH.Detector
	}
    {
		name=takeHighSpeedExposures
		subsystem=APS
		component=ICS.APT.Detector
	}



    # Filter Cmds
 
 	{
		name=selectFilter
		subsystem=APS
		component=ICS.APT.FilterWheel
	}
	{
		name=selectFilter
		subsystem=APS
		component=ICS.PIT.FilterWheel
	}
	{
		name=selectFilter
		subsystem=APS
		component=ICS.PSH.FilterWheel
	}

    # Pupil Mask Cmds

	{
		name=selectPupilMask
		subsystem=APS
		component=ICS.PIT.PupilMaskWheel
	}
	{
		name=selectPupilMask
		subsystem=APS
		component=ICS.PSH.PupilMaskWheel
	}

    # K-Mirror
    
    {
		name=positionKMirror
		subsystem=APS
		component=ICS.FOC.KMirror
	}
    {
		name=setMode
		subsystem=APS
		component=ICS.FOC.KMirror
	}

    # Tilt Plate
    {
		name=positionTiltPlate
		subsystem=APS
		component=ICS.FOC.TiltPlate
	}
    
    # Collimator Unit
    {
		name=changeScale
		subsystem=APS
		component=ICS.FOC.CollimatorUnit
	}

    # Calibration Source Stage

    {
		name=setOpticAndSourceIntensity
		subsystem=APS
		component=ICS.FOC.CalibrationSourceStage
	}



    # Position cmds for remaining 

	{
		name=positionWheel
		subsystem=APS
		component=ICS.APT.FilterWheel
	}
	{
		name=positionWheel
		subsystem=APS
		component=ICS.PIT.FilterWheel
	}
	{
		name=positionWheel
		subsystem=APS
		component=ICS.PSH.FilterWheel
	}
	{
		name=positionWheel
		subsystem=APS
		component=ICS.PIT.PupilMaskWheel
	}
	{
		name=positionWheel
		subsystem=APS
		component=ICS.PSH.PupilMaskWheel
	}

    {
		name=setPosition
		subsystem=APS
		component=ICS.FOC.CalibrationSourceStage
	}
    {
		name=positionFrontMotor
		subsystem=APS
		component=ICS.FOC.CollimatorUnit
	}
    {
		name=positionBackMotor
		subsystem=APS
		component=ICS.FOC.CollimatorUnit
	}
    {
		name=positionBeamSplitter
		subsystem=APS
		component=ICS.FOC.SteeringBeamSplitterStage
	}
    {
		name=positionFocusStage
		subsystem=APS
		component=ICS.PIT.FocusStage
	}
    {
		name=positionFocusStage
		subsystem=APS
		component=ICS.PSH.FocusStage
	}
    {
		name=positionSource
		subsystem=APS
		component=ICS.STIM.FiberSourceStage
	}
    {
		name=positionStage
		subsystem=APS
		component=ICS.STIM.InsertionStage
	}
    {
		name=positionMaskStage
		subsystem=APS
		component=ICS.STIM.PupilMaskStage
	}




    #M1CS commands

	{
		name=SaveSensorSettings
		subsystem=M1CS
		component=GLC
	}
    {
		name=RestoreSensorSettings
		subsystem=M1CS
		component=GLC
	}

	{
		name=GetWarpingHarnessConfig
		subsystem=M1CS
		component=GLC
	}
	{
		name=ReadWarpingHarness
		subsystem=M1CS
		component=GLC
	}
    {
		name=CalibrateWarpingHarness
		subsystem=M1CS
		component=GLC
	}
	{
		name=SetWarpingHarness
		subsystem=M1CS
		component=GLC
	}
	{
		name=OffsetActuatorPositions
		subsystem=M1CS
		component=GLC
	}

	{
		name=OffloadSensorOffsets
		subsystem=M1CS
		component=GLC
	}

    # TCS Commands

	{
		name=offsetM2Position
		subsystem=TCS
		component=TCS APS Assembly
	}
    {
		name=offsetTelescopePosAzEl
		subsystem=TCS
		component=TCS APS Assembly
	}
	{
		name=offsetImageLocationWithM3
		subsystem=TCS
		component=TCS APS Assembly
	}
	{
		name=clearM2PositionOffsets
		subsystem=TCS
		component=TCS APS Assembly
	}
    {
		name=clearM3PositionOffsets
		subsystem=TCS
		component=TCS APS Assembly
	}
	{
		name=clearTelescopePositionOffsets
		subsystem=TCS
		component=TCS APS Assembly
	}
	{
		name=saveM3Position
		subsystem=TCS
		component=TCS APS Assembly
	}

]
